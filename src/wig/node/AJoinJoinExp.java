/* This file was generated by SableCC (http://www.sablecc.org/). */

package wig.node;

import java.util.*;
import wig.analysis.*;

public final class AJoinJoinExp extends PJoinExp
{
    private PTupleExp _left_;
    private TJoin _join_;
    private PJoinExp _right_;

    public AJoinJoinExp()
    {
    }

    public AJoinJoinExp(
        PTupleExp _left_,
        TJoin _join_,
        PJoinExp _right_)
    {
        setLeft(_left_);

        setJoin(_join_);

        setRight(_right_);

    }
    public Object clone()
    {
        return new AJoinJoinExp(
            (PTupleExp) cloneNode(_left_),
            (TJoin) cloneNode(_join_),
            (PJoinExp) cloneNode(_right_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAJoinJoinExp(this);
    }

    public PTupleExp getLeft()
    {
        return _left_;
    }

    public void setLeft(PTupleExp node)
    {
        if(_left_ != null)
        {
            _left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _left_ = node;
    }

    public TJoin getJoin()
    {
        return _join_;
    }

    public void setJoin(TJoin node)
    {
        if(_join_ != null)
        {
            _join_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _join_ = node;
    }

    public PJoinExp getRight()
    {
        return _right_;
    }

    public void setRight(PJoinExp node)
    {
        if(_right_ != null)
        {
            _right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _right_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_left_)
            + toString(_join_)
            + toString(_right_);
    }

    void removeChild(Node child)
    {
        if(_left_ == child)
        {
            _left_ = null;
            return;
        }

        if(_join_ == child)
        {
            _join_ = null;
            return;
        }

        if(_right_ == child)
        {
            _right_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_left_ == oldChild)
        {
            setLeft((PTupleExp) newChild);
            return;
        }

        if(_join_ == oldChild)
        {
            setJoin((TJoin) newChild);
            return;
        }

        if(_right_ == oldChild)
        {
            setRight((PJoinExp) newChild);
            return;
        }

    }
}
