/* This file was generated by SableCC (http://www.sablecc.org/). */

package wig.node;

import java.util.*;
import wig.analysis.*;

public final class ARemoveManyTupleExp extends PTupleExp
{
    private PTupleExp _tupleExp_;
    private TRemove _remove_;
    private TLPar _lPar_;
    private PIdentifiers _identifiers_;
    private TRPar _rPar_;

    public ARemoveManyTupleExp()
    {
    }

    public ARemoveManyTupleExp(
        PTupleExp _tupleExp_,
        TRemove _remove_,
        TLPar _lPar_,
        PIdentifiers _identifiers_,
        TRPar _rPar_)
    {
        setTupleExp(_tupleExp_);

        setRemove(_remove_);

        setLPar(_lPar_);

        setIdentifiers(_identifiers_);

        setRPar(_rPar_);

    }
    public Object clone()
    {
        return new ARemoveManyTupleExp(
            (PTupleExp) cloneNode(_tupleExp_),
            (TRemove) cloneNode(_remove_),
            (TLPar) cloneNode(_lPar_),
            (PIdentifiers) cloneNode(_identifiers_),
            (TRPar) cloneNode(_rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARemoveManyTupleExp(this);
    }

    public PTupleExp getTupleExp()
    {
        return _tupleExp_;
    }

    public void setTupleExp(PTupleExp node)
    {
        if(_tupleExp_ != null)
        {
            _tupleExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _tupleExp_ = node;
    }

    public TRemove getRemove()
    {
        return _remove_;
    }

    public void setRemove(TRemove node)
    {
        if(_remove_ != null)
        {
            _remove_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _remove_ = node;
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public PIdentifiers getIdentifiers()
    {
        return _identifiers_;
    }

    public void setIdentifiers(PIdentifiers node)
    {
        if(_identifiers_ != null)
        {
            _identifiers_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifiers_ = node;
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_tupleExp_)
            + toString(_remove_)
            + toString(_lPar_)
            + toString(_identifiers_)
            + toString(_rPar_);
    }

    void removeChild(Node child)
    {
        if(_tupleExp_ == child)
        {
            _tupleExp_ = null;
            return;
        }

        if(_remove_ == child)
        {
            _remove_ = null;
            return;
        }

        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_identifiers_ == child)
        {
            _identifiers_ = null;
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_tupleExp_ == oldChild)
        {
            setTupleExp((PTupleExp) newChild);
            return;
        }

        if(_remove_ == oldChild)
        {
            setRemove((TRemove) newChild);
            return;
        }

        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_identifiers_ == oldChild)
        {
            setIdentifiers((PIdentifiers) newChild);
            return;
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

    }
}
