/* This file was generated by SableCC (http://www.sablecc.org/). */

package wig.node;

import java.util.*;
import wig.analysis.*;

public final class ATagStartHtmlbody extends PHtmlbody
{
    private TLt _lt_;
    private TIdentifier _identifier_;
    private final LinkedList _attribute_ = new TypedLinkedList(new Attribute_Cast());
    private TGt _gt_;

    public ATagStartHtmlbody()
    {
    }

    public ATagStartHtmlbody(
        TLt _lt_,
        TIdentifier _identifier_,
        List _attribute_,
        TGt _gt_)
    {
        setLt(_lt_);

        setIdentifier(_identifier_);

        {
            this._attribute_.clear();
            this._attribute_.addAll(_attribute_);
        }

        setGt(_gt_);

    }
    public Object clone()
    {
        return new ATagStartHtmlbody(
            (TLt) cloneNode(_lt_),
            (TIdentifier) cloneNode(_identifier_),
            cloneList(_attribute_),
            (TGt) cloneNode(_gt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATagStartHtmlbody(this);
    }

    public TLt getLt()
    {
        return _lt_;
    }

    public void setLt(TLt node)
    {
        if(_lt_ != null)
        {
            _lt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lt_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public LinkedList getAttribute()
    {
        return _attribute_;
    }

    public void setAttribute(List list)
    {
        _attribute_.clear();
        _attribute_.addAll(list);
    }

    public TGt getGt()
    {
        return _gt_;
    }

    public void setGt(TGt node)
    {
        if(_gt_ != null)
        {
            _gt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _gt_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lt_)
            + toString(_identifier_)
            + toString(_attribute_)
            + toString(_gt_);
    }

    void removeChild(Node child)
    {
        if(_lt_ == child)
        {
            _lt_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_attribute_.remove(child))
        {
            return;
        }

        if(_gt_ == child)
        {
            _gt_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lt_ == oldChild)
        {
            setLt((TLt) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        for(ListIterator i = _attribute_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_gt_ == oldChild)
        {
            setGt((TGt) newChild);
            return;
        }

    }

    private class Attribute_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PAttribute node = (PAttribute) o;

            if((node.parent() != null) &&
                (node.parent() != ATagStartHtmlbody.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ATagStartHtmlbody.this))
            {
                node.parent(ATagStartHtmlbody.this);
            }

            return node;
        }
    }
}
