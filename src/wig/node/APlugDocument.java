/* This file was generated by SableCC (http://www.sablecc.org/). */

package wig.node;

import java.util.*;
import wig.analysis.*;

public final class APlugDocument extends PDocument
{
    private TPlug _plug_;
    private TIdentifier _identifier_;
    private TLBracket _lBracket_;
    private PPlugs _plugs_;
    private TRBracket _rBracket_;

    public APlugDocument()
    {
    }

    public APlugDocument(
        TPlug _plug_,
        TIdentifier _identifier_,
        TLBracket _lBracket_,
        PPlugs _plugs_,
        TRBracket _rBracket_)
    {
        setPlug(_plug_);

        setIdentifier(_identifier_);

        setLBracket(_lBracket_);

        setPlugs(_plugs_);

        setRBracket(_rBracket_);

    }
    public Object clone()
    {
        return new APlugDocument(
            (TPlug) cloneNode(_plug_),
            (TIdentifier) cloneNode(_identifier_),
            (TLBracket) cloneNode(_lBracket_),
            (PPlugs) cloneNode(_plugs_),
            (TRBracket) cloneNode(_rBracket_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPlugDocument(this);
    }

    public TPlug getPlug()
    {
        return _plug_;
    }

    public void setPlug(TPlug node)
    {
        if(_plug_ != null)
        {
            _plug_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _plug_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TLBracket getLBracket()
    {
        return _lBracket_;
    }

    public void setLBracket(TLBracket node)
    {
        if(_lBracket_ != null)
        {
            _lBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lBracket_ = node;
    }

    public PPlugs getPlugs()
    {
        return _plugs_;
    }

    public void setPlugs(PPlugs node)
    {
        if(_plugs_ != null)
        {
            _plugs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _plugs_ = node;
    }

    public TRBracket getRBracket()
    {
        return _rBracket_;
    }

    public void setRBracket(TRBracket node)
    {
        if(_rBracket_ != null)
        {
            _rBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rBracket_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_plug_)
            + toString(_identifier_)
            + toString(_lBracket_)
            + toString(_plugs_)
            + toString(_rBracket_);
    }

    void removeChild(Node child)
    {
        if(_plug_ == child)
        {
            _plug_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_lBracket_ == child)
        {
            _lBracket_ = null;
            return;
        }

        if(_plugs_ == child)
        {
            _plugs_ = null;
            return;
        }

        if(_rBracket_ == child)
        {
            _rBracket_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_plug_ == oldChild)
        {
            setPlug((TPlug) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_lBracket_ == oldChild)
        {
            setLBracket((TLBracket) newChild);
            return;
        }

        if(_plugs_ == oldChild)
        {
            setPlugs((PPlugs) newChild);
            return;
        }

        if(_rBracket_ == oldChild)
        {
            setRBracket((TRBracket) newChild);
            return;
        }

    }
}
