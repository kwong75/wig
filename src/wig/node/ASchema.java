/* This file was generated by SableCC (http://www.sablecc.org/). */

package wig.node;

import java.util.*;
import wig.analysis.*;

public final class ASchema extends PSchema
{
    private TSchema _schema_;
    private TIdentifier _identifier_;
    private TLBrace _lBrace_;
    private final LinkedList _field_ = new TypedLinkedList(new Field_Cast());
    private TRBrace _rBrace_;

    public ASchema()
    {
    }

    public ASchema(
        TSchema _schema_,
        TIdentifier _identifier_,
        TLBrace _lBrace_,
        List _field_,
        TRBrace _rBrace_)
    {
        setSchema(_schema_);

        setIdentifier(_identifier_);

        setLBrace(_lBrace_);

        {
            this._field_.clear();
            this._field_.addAll(_field_);
        }

        setRBrace(_rBrace_);

    }
    public Object clone()
    {
        return new ASchema(
            (TSchema) cloneNode(_schema_),
            (TIdentifier) cloneNode(_identifier_),
            (TLBrace) cloneNode(_lBrace_),
            cloneList(_field_),
            (TRBrace) cloneNode(_rBrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASchema(this);
    }

    public TSchema getSchema()
    {
        return _schema_;
    }

    public void setSchema(TSchema node)
    {
        if(_schema_ != null)
        {
            _schema_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _schema_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TLBrace getLBrace()
    {
        return _lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(_lBrace_ != null)
        {
            _lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lBrace_ = node;
    }

    public LinkedList getField()
    {
        return _field_;
    }

    public void setField(List list)
    {
        _field_.clear();
        _field_.addAll(list);
    }

    public TRBrace getRBrace()
    {
        return _rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(_rBrace_ != null)
        {
            _rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rBrace_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_schema_)
            + toString(_identifier_)
            + toString(_lBrace_)
            + toString(_field_)
            + toString(_rBrace_);
    }

    void removeChild(Node child)
    {
        if(_schema_ == child)
        {
            _schema_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_lBrace_ == child)
        {
            _lBrace_ = null;
            return;
        }

        if(_field_.remove(child))
        {
            return;
        }

        if(_rBrace_ == child)
        {
            _rBrace_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_schema_ == oldChild)
        {
            setSchema((TSchema) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        for(ListIterator i = _field_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

    }

    private class Field_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PField node = (PField) o;

            if((node.parent() != null) &&
                (node.parent() != ASchema.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ASchema.this))
            {
                node.parent(ASchema.this);
            }

            return node;
        }
    }
}
