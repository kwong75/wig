/* This file was generated by SableCC (http://www.sablecc.org/). */

package wig.node;

import java.util.*;
import wig.analysis.*;

public final class ATypeInputattr extends PInputattr
{
    private TType _type_;
    private TAssign _assign_;
    private PInputtype _inputtype_;

    public ATypeInputattr()
    {
    }

    public ATypeInputattr(
        TType _type_,
        TAssign _assign_,
        PInputtype _inputtype_)
    {
        setType(_type_);

        setAssign(_assign_);

        setInputtype(_inputtype_);

    }
    public Object clone()
    {
        return new ATypeInputattr(
            (TType) cloneNode(_type_),
            (TAssign) cloneNode(_assign_),
            (PInputtype) cloneNode(_inputtype_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATypeInputattr(this);
    }

    public TType getType()
    {
        return _type_;
    }

    public void setType(TType node)
    {
        if(_type_ != null)
        {
            _type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _type_ = node;
    }

    public TAssign getAssign()
    {
        return _assign_;
    }

    public void setAssign(TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _assign_ = node;
    }

    public PInputtype getInputtype()
    {
        return _inputtype_;
    }

    public void setInputtype(PInputtype node)
    {
        if(_inputtype_ != null)
        {
            _inputtype_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _inputtype_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_type_)
            + toString(_assign_)
            + toString(_inputtype_);
    }

    void removeChild(Node child)
    {
        if(_type_ == child)
        {
            _type_ = null;
            return;
        }

        if(_assign_ == child)
        {
            _assign_ = null;
            return;
        }

        if(_inputtype_ == child)
        {
            _inputtype_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_type_ == oldChild)
        {
            setType((TType) newChild);
            return;
        }

        if(_assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(_inputtype_ == oldChild)
        {
            setInputtype((PInputtype) newChild);
            return;
        }

    }
}
