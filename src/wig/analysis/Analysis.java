/* This file was generated by SableCC (http://www.sablecc.org/). */

package wig.analysis;

import wig.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAService(AService node);
    void caseAHtml(AHtml node);
    void caseATagStartHtmlbody(ATagStartHtmlbody node);
    void caseATagEndHtmlbody(ATagEndHtmlbody node);
    void caseAHoleHtmlbody(AHoleHtmlbody node);
    void caseAWhateverHtmlbody(AWhateverHtmlbody node);
    void caseAMetaHtmlbody(AMetaHtmlbody node);
    void caseAInputHtmlbody(AInputHtmlbody node);
    void caseASelectHtmlbody(ASelectHtmlbody node);
    void caseANameInputattr(ANameInputattr node);
    void caseATypeInputattr(ATypeInputattr node);
    void caseAAttributeInputattr(AAttributeInputattr node);
    void caseATextInputtype(ATextInputtype node);
    void caseARadioInputtype(ARadioInputtype node);
    void caseAAttrAttribute(AAttrAttribute node);
    void caseAAssignAttribute(AAssignAttribute node);
    void caseAIdAttr(AIdAttr node);
    void caseAIntAttr(AIntAttr node);
    void caseAStrAttr(AStrAttr node);
    void caseASchema(ASchema node);
    void caseAField(AField node);
    void caseAVariable(AVariable node);
    void caseAOneIdentifiers(AOneIdentifiers node);
    void caseAManyIdentifiers(AManyIdentifiers node);
    void caseAIntSimpletype(AIntSimpletype node);
    void caseABoolSimpletype(ABoolSimpletype node);
    void caseAStringSimpletype(AStringSimpletype node);
    void caseAVoidSimpletype(AVoidSimpletype node);
    void caseASimpleType(ASimpleType node);
    void caseATupleType(ATupleType node);
    void caseAFunction(AFunction node);
    void caseAOneArguments(AOneArguments node);
    void caseAManyArguments(AManyArguments node);
    void caseAArgument(AArgument node);
    void caseASession(ASession node);
    void caseANoStm(ANoStm node);
    void caseAShowStm(AShowStm node);
    void caseAExitStm(AExitStm node);
    void caseAReturnStm(AReturnStm node);
    void caseARetexpStm(ARetexpStm node);
    void caseAIfStm(AIfStm node);
    void caseAIfelseStm(AIfelseStm node);
    void caseAWhileStm(AWhileStm node);
    void caseACompStm(ACompStm node);
    void caseAExpStm(AExpStm node);
    void caseANoStmNoShortIf(ANoStmNoShortIf node);
    void caseAShowStmNoShortIf(AShowStmNoShortIf node);
    void caseAExitStmNoShortIf(AExitStmNoShortIf node);
    void caseAReturnStmNoShortIf(AReturnStmNoShortIf node);
    void caseARetexpStmNoShortIf(ARetexpStmNoShortIf node);
    void caseAIfelseStmNoShortIf(AIfelseStmNoShortIf node);
    void caseAWhileStmNoShortIf(AWhileStmNoShortIf node);
    void caseACompStmNoShortIf(ACompStmNoShortIf node);
    void caseAExpStmNoShortIf(AExpStmNoShortIf node);
    void caseAIdDocument(AIdDocument node);
    void caseAPlugDocument(APlugDocument node);
    void caseAReceive(AReceive node);
    void caseACompoundstm(ACompoundstm node);
    void caseAOnePlugs(AOnePlugs node);
    void caseAManyPlugs(AManyPlugs node);
    void caseAPlug(APlug node);
    void caseAOneInputs(AOneInputs node);
    void caseAManyInputs(AManyInputs node);
    void caseAInput(AInput node);
    void caseAAssignExp(AAssignExp node);
    void caseADefaultExp(ADefaultExp node);
    void caseAOrOrExp(AOrOrExp node);
    void caseADefaultOrExp(ADefaultOrExp node);
    void caseAAndAndExp(AAndAndExp node);
    void caseADefaultAndExp(ADefaultAndExp node);
    void caseAEqCmpExp(AEqCmpExp node);
    void caseANeqCmpExp(ANeqCmpExp node);
    void caseALtCmpExp(ALtCmpExp node);
    void caseAGtCmpExp(AGtCmpExp node);
    void caseALteqCmpExp(ALteqCmpExp node);
    void caseAGteqCmpExp(AGteqCmpExp node);
    void caseADefaultCmpExp(ADefaultCmpExp node);
    void caseAPlusAddExp(APlusAddExp node);
    void caseAMinusAddExp(AMinusAddExp node);
    void caseADefaultAddExp(ADefaultAddExp node);
    void caseAMultMultExp(AMultMultExp node);
    void caseADivMultExp(ADivMultExp node);
    void caseAModMultExp(AModMultExp node);
    void caseADefaultMultExp(ADefaultMultExp node);
    void caseAJoinJoinExp(AJoinJoinExp node);
    void caseADefaultJoinExp(ADefaultJoinExp node);
    void caseAKeepTupleExp(AKeepTupleExp node);
    void caseARemoveTupleExp(ARemoveTupleExp node);
    void caseAKeepManyTupleExp(AKeepManyTupleExp node);
    void caseARemoveManyTupleExp(ARemoveManyTupleExp node);
    void caseADefaultTupleExp(ADefaultTupleExp node);
    void caseANotUnaryExp(ANotUnaryExp node);
    void caseANegUnaryExp(ANegUnaryExp node);
    void caseADefaultUnaryExp(ADefaultUnaryExp node);
    void caseALvalueBaseExp(ALvalueBaseExp node);
    void caseACallBaseExp(ACallBaseExp node);
    void caseAIntBaseExp(AIntBaseExp node);
    void caseATrueBaseExp(ATrueBaseExp node);
    void caseAFalseBaseExp(AFalseBaseExp node);
    void caseAStringBaseExp(AStringBaseExp node);
    void caseATupleBaseExp(ATupleBaseExp node);
    void caseAParenBaseExp(AParenBaseExp node);
    void caseAOneExps(AOneExps node);
    void caseAManyExps(AManyExps node);
    void caseASimpleLvalue(ASimpleLvalue node);
    void caseAQualifiedLvalue(AQualifiedLvalue node);
    void caseAOneFieldvalues(AOneFieldvalues node);
    void caseAManyFieldvalues(AManyFieldvalues node);
    void caseAFieldvalue(AFieldvalue node);

    void caseTEol(TEol node);
    void caseTBlank(TBlank node);
    void caseTCommentline(TCommentline node);
    void caseTCommentmulti(TCommentmulti node);
    void caseTService(TService node);
    void caseTConst(TConst node);
    void caseTHtml(THtml node);
    void caseTHtmlTagStart(THtmlTagStart node);
    void caseTHtmlTagEnd(THtmlTagEnd node);
    void caseTInput(TInput node);
    void caseTSelect(TSelect node);
    void caseTType(TType node);
    void caseTName(TName node);
    void caseTText(TText node);
    void caseTRadio(TRadio node);
    void caseTSchema(TSchema node);
    void caseTSession(TSession node);
    void caseTShow(TShow node);
    void caseTExit(TExit node);
    void caseTReturn(TReturn node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTPlug(TPlug node);
    void caseTReceive(TReceive node);
    void caseTInt(TInt node);
    void caseTBool(TBool node);
    void caseTString(TString node);
    void caseTVoid(TVoid node);
    void caseTTuple(TTuple node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTAssign(TAssign node);
    void caseTSemicolon(TSemicolon node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTLtSlash(TLtSlash node);
    void caseTLtBracket(TLtBracket node);
    void caseTGtBracket(TGtBracket node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTComma(TComma node);
    void caseTKeep(TKeep node);
    void caseTRemove(TRemove node);
    void caseTJoin(TJoin node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTNot(TNot node);
    void caseTMinus(TMinus node);
    void caseTPlus(TPlus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTDot(TDot node);
    void caseTIdentifier(TIdentifier node);
    void caseTIntconst(TIntconst node);
    void caseTStringconst(TStringconst node);
    void caseTMeta(TMeta node);
    void caseTWhatever(TWhatever node);
    void caseEOF(EOF node);
}
