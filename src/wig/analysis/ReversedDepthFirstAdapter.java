/* This file was generated by SableCC (http://www.sablecc.org/). */

package wig.analysis;

import wig.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPService().apply(this);
        outStart(node);
    }

    public void inAService(AService node)
    {
        defaultIn(node);
    }

    public void outAService(AService node)
    {
        defaultOut(node);
    }

    public void caseAService(AService node)
    {
        inAService(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getSession().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PSession) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getFunction().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PFunction) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getVariable().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PVariable) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getSchema().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PSchema) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getHtml().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHtml) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getService() != null)
        {
            node.getService().apply(this);
        }
        outAService(node);
    }

    public void inAHtml(AHtml node)
    {
        defaultIn(node);
    }

    public void outAHtml(AHtml node)
    {
        defaultOut(node);
    }

    public void caseAHtml(AHtml node)
    {
        inAHtml(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getHtmlTagEnd() != null)
        {
            node.getHtmlTagEnd().apply(this);
        }
        {
            Object temp[] = node.getHtmlbody().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHtmlbody) temp[i]).apply(this);
            }
        }
        if(node.getHtmlTagStart() != null)
        {
            node.getHtmlTagStart().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getHtml() != null)
        {
            node.getHtml().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outAHtml(node);
    }

    public void inATagStartHtmlbody(ATagStartHtmlbody node)
    {
        defaultIn(node);
    }

    public void outATagStartHtmlbody(ATagStartHtmlbody node)
    {
        defaultOut(node);
    }

    public void caseATagStartHtmlbody(ATagStartHtmlbody node)
    {
        inATagStartHtmlbody(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        {
            Object temp[] = node.getAttribute().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAttribute) temp[i]).apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outATagStartHtmlbody(node);
    }

    public void inATagEndHtmlbody(ATagEndHtmlbody node)
    {
        defaultIn(node);
    }

    public void outATagEndHtmlbody(ATagEndHtmlbody node)
    {
        defaultOut(node);
    }

    public void caseATagEndHtmlbody(ATagEndHtmlbody node)
    {
        inATagEndHtmlbody(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLtSlash() != null)
        {
            node.getLtSlash().apply(this);
        }
        outATagEndHtmlbody(node);
    }

    public void inAHoleHtmlbody(AHoleHtmlbody node)
    {
        defaultIn(node);
    }

    public void outAHoleHtmlbody(AHoleHtmlbody node)
    {
        defaultOut(node);
    }

    public void caseAHoleHtmlbody(AHoleHtmlbody node)
    {
        inAHoleHtmlbody(node);
        if(node.getGtBracket() != null)
        {
            node.getGtBracket().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLtBracket() != null)
        {
            node.getLtBracket().apply(this);
        }
        outAHoleHtmlbody(node);
    }

    public void inAWhateverHtmlbody(AWhateverHtmlbody node)
    {
        defaultIn(node);
    }

    public void outAWhateverHtmlbody(AWhateverHtmlbody node)
    {
        defaultOut(node);
    }

    public void caseAWhateverHtmlbody(AWhateverHtmlbody node)
    {
        inAWhateverHtmlbody(node);
        if(node.getWhatever() != null)
        {
            node.getWhatever().apply(this);
        }
        outAWhateverHtmlbody(node);
    }

    public void inAMetaHtmlbody(AMetaHtmlbody node)
    {
        defaultIn(node);
    }

    public void outAMetaHtmlbody(AMetaHtmlbody node)
    {
        defaultOut(node);
    }

    public void caseAMetaHtmlbody(AMetaHtmlbody node)
    {
        inAMetaHtmlbody(node);
        if(node.getMeta() != null)
        {
            node.getMeta().apply(this);
        }
        outAMetaHtmlbody(node);
    }

    public void inAInputHtmlbody(AInputHtmlbody node)
    {
        defaultIn(node);
    }

    public void outAInputHtmlbody(AInputHtmlbody node)
    {
        defaultOut(node);
    }

    public void caseAInputHtmlbody(AInputHtmlbody node)
    {
        inAInputHtmlbody(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        {
            Object temp[] = node.getInputattr().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PInputattr) temp[i]).apply(this);
            }
        }
        if(node.getInput() != null)
        {
            node.getInput().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outAInputHtmlbody(node);
    }

    public void inASelectHtmlbody(ASelectHtmlbody node)
    {
        defaultIn(node);
    }

    public void outASelectHtmlbody(ASelectHtmlbody node)
    {
        defaultOut(node);
    }

    public void caseASelectHtmlbody(ASelectHtmlbody node)
    {
        inASelectHtmlbody(node);
        if(node.getSecondGt() != null)
        {
            node.getSecondGt().apply(this);
        }
        if(node.getSelect() != null)
        {
            node.getSelect().apply(this);
        }
        if(node.getLtSlash() != null)
        {
            node.getLtSlash().apply(this);
        }
        {
            Object temp[] = node.getHtmlbody().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHtmlbody) temp[i]).apply(this);
            }
        }
        if(node.getFirstGt() != null)
        {
            node.getFirstGt().apply(this);
        }
        {
            Object temp[] = node.getInputattr().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PInputattr) temp[i]).apply(this);
            }
        }
        if(node.getSelectTag() != null)
        {
            node.getSelectTag().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outASelectHtmlbody(node);
    }

    public void inANameInputattr(ANameInputattr node)
    {
        defaultIn(node);
    }

    public void outANameInputattr(ANameInputattr node)
    {
        defaultOut(node);
    }

    public void caseANameInputattr(ANameInputattr node)
    {
        inANameInputattr(node);
        if(node.getAttr() != null)
        {
            node.getAttr().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANameInputattr(node);
    }

    public void inATypeInputattr(ATypeInputattr node)
    {
        defaultIn(node);
    }

    public void outATypeInputattr(ATypeInputattr node)
    {
        defaultOut(node);
    }

    public void caseATypeInputattr(ATypeInputattr node)
    {
        inATypeInputattr(node);
        if(node.getInputtype() != null)
        {
            node.getInputtype().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeInputattr(node);
    }

    public void inAAttributeInputattr(AAttributeInputattr node)
    {
        defaultIn(node);
    }

    public void outAAttributeInputattr(AAttributeInputattr node)
    {
        defaultOut(node);
    }

    public void caseAAttributeInputattr(AAttributeInputattr node)
    {
        inAAttributeInputattr(node);
        if(node.getAttribute() != null)
        {
            node.getAttribute().apply(this);
        }
        outAAttributeInputattr(node);
    }

    public void inATextInputtype(ATextInputtype node)
    {
        defaultIn(node);
    }

    public void outATextInputtype(ATextInputtype node)
    {
        defaultOut(node);
    }

    public void caseATextInputtype(ATextInputtype node)
    {
        inATextInputtype(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        outATextInputtype(node);
    }

    public void inARadioInputtype(ARadioInputtype node)
    {
        defaultIn(node);
    }

    public void outARadioInputtype(ARadioInputtype node)
    {
        defaultOut(node);
    }

    public void caseARadioInputtype(ARadioInputtype node)
    {
        inARadioInputtype(node);
        if(node.getRadio() != null)
        {
            node.getRadio().apply(this);
        }
        outARadioInputtype(node);
    }

    public void inAAttrAttribute(AAttrAttribute node)
    {
        defaultIn(node);
    }

    public void outAAttrAttribute(AAttrAttribute node)
    {
        defaultOut(node);
    }

    public void caseAAttrAttribute(AAttrAttribute node)
    {
        inAAttrAttribute(node);
        if(node.getAttr() != null)
        {
            node.getAttr().apply(this);
        }
        outAAttrAttribute(node);
    }

    public void inAAssignAttribute(AAssignAttribute node)
    {
        defaultIn(node);
    }

    public void outAAssignAttribute(AAssignAttribute node)
    {
        defaultOut(node);
    }

    public void caseAAssignAttribute(AAssignAttribute node)
    {
        inAAssignAttribute(node);
        if(node.getRightAttr() != null)
        {
            node.getRightAttr().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getLeftAttr() != null)
        {
            node.getLeftAttr().apply(this);
        }
        outAAssignAttribute(node);
    }

    public void inAIdAttr(AIdAttr node)
    {
        defaultIn(node);
    }

    public void outAIdAttr(AIdAttr node)
    {
        defaultOut(node);
    }

    public void caseAIdAttr(AIdAttr node)
    {
        inAIdAttr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdAttr(node);
    }

    public void inAIntAttr(AIntAttr node)
    {
        defaultIn(node);
    }

    public void outAIntAttr(AIntAttr node)
    {
        defaultOut(node);
    }

    public void caseAIntAttr(AIntAttr node)
    {
        inAIntAttr(node);
        if(node.getIntconst() != null)
        {
            node.getIntconst().apply(this);
        }
        outAIntAttr(node);
    }

    public void inAStrAttr(AStrAttr node)
    {
        defaultIn(node);
    }

    public void outAStrAttr(AStrAttr node)
    {
        defaultOut(node);
    }

    public void caseAStrAttr(AStrAttr node)
    {
        inAStrAttr(node);
        if(node.getStringconst() != null)
        {
            node.getStringconst().apply(this);
        }
        outAStrAttr(node);
    }

    public void inASchema(ASchema node)
    {
        defaultIn(node);
    }

    public void outASchema(ASchema node)
    {
        defaultOut(node);
    }

    public void caseASchema(ASchema node)
    {
        inASchema(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getField().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PField) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSchema() != null)
        {
            node.getSchema().apply(this);
        }
        outASchema(node);
    }

    public void inAField(AField node)
    {
        defaultIn(node);
    }

    public void outAField(AField node)
    {
        defaultOut(node);
    }

    public void caseAField(AField node)
    {
        inAField(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSimpletype() != null)
        {
            node.getSimpletype().apply(this);
        }
        outAField(node);
    }

    public void inAVariable(AVariable node)
    {
        defaultIn(node);
    }

    public void outAVariable(AVariable node)
    {
        defaultOut(node);
    }

    public void caseAVariable(AVariable node)
    {
        inAVariable(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getIdentifiers() != null)
        {
            node.getIdentifiers().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAVariable(node);
    }

    public void inAOneIdentifiers(AOneIdentifiers node)
    {
        defaultIn(node);
    }

    public void outAOneIdentifiers(AOneIdentifiers node)
    {
        defaultOut(node);
    }

    public void caseAOneIdentifiers(AOneIdentifiers node)
    {
        inAOneIdentifiers(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAOneIdentifiers(node);
    }

    public void inAManyIdentifiers(AManyIdentifiers node)
    {
        defaultIn(node);
    }

    public void outAManyIdentifiers(AManyIdentifiers node)
    {
        defaultOut(node);
    }

    public void caseAManyIdentifiers(AManyIdentifiers node)
    {
        inAManyIdentifiers(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifiers() != null)
        {
            node.getIdentifiers().apply(this);
        }
        outAManyIdentifiers(node);
    }

    public void inAIntSimpletype(AIntSimpletype node)
    {
        defaultIn(node);
    }

    public void outAIntSimpletype(AIntSimpletype node)
    {
        defaultOut(node);
    }

    public void caseAIntSimpletype(AIntSimpletype node)
    {
        inAIntSimpletype(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntSimpletype(node);
    }

    public void inABoolSimpletype(ABoolSimpletype node)
    {
        defaultIn(node);
    }

    public void outABoolSimpletype(ABoolSimpletype node)
    {
        defaultOut(node);
    }

    public void caseABoolSimpletype(ABoolSimpletype node)
    {
        inABoolSimpletype(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolSimpletype(node);
    }

    public void inAStringSimpletype(AStringSimpletype node)
    {
        defaultIn(node);
    }

    public void outAStringSimpletype(AStringSimpletype node)
    {
        defaultOut(node);
    }

    public void caseAStringSimpletype(AStringSimpletype node)
    {
        inAStringSimpletype(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringSimpletype(node);
    }

    public void inAVoidSimpletype(AVoidSimpletype node)
    {
        defaultIn(node);
    }

    public void outAVoidSimpletype(AVoidSimpletype node)
    {
        defaultOut(node);
    }

    public void caseAVoidSimpletype(AVoidSimpletype node)
    {
        inAVoidSimpletype(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidSimpletype(node);
    }

    public void inASimpleType(ASimpleType node)
    {
        defaultIn(node);
    }

    public void outASimpleType(ASimpleType node)
    {
        defaultOut(node);
    }

    public void caseASimpleType(ASimpleType node)
    {
        inASimpleType(node);
        if(node.getSimpletype() != null)
        {
            node.getSimpletype().apply(this);
        }
        outASimpleType(node);
    }

    public void inATupleType(ATupleType node)
    {
        defaultIn(node);
    }

    public void outATupleType(ATupleType node)
    {
        defaultOut(node);
    }

    public void caseATupleType(ATupleType node)
    {
        inATupleType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTuple() != null)
        {
            node.getTuple().apply(this);
        }
        outATupleType(node);
    }

    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        if(node.getCompoundstm() != null)
        {
            node.getCompoundstm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArguments() != null)
        {
            node.getArguments().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAFunction(node);
    }

    public void inAOneArguments(AOneArguments node)
    {
        defaultIn(node);
    }

    public void outAOneArguments(AOneArguments node)
    {
        defaultOut(node);
    }

    public void caseAOneArguments(AOneArguments node)
    {
        inAOneArguments(node);
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        outAOneArguments(node);
    }

    public void inAManyArguments(AManyArguments node)
    {
        defaultIn(node);
    }

    public void outAManyArguments(AManyArguments node)
    {
        defaultOut(node);
    }

    public void caseAManyArguments(AManyArguments node)
    {
        inAManyArguments(node);
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getArguments() != null)
        {
            node.getArguments().apply(this);
        }
        outAManyArguments(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAArgument(node);
    }

    public void inASession(ASession node)
    {
        defaultIn(node);
    }

    public void outASession(ASession node)
    {
        defaultOut(node);
    }

    public void caseASession(ASession node)
    {
        inASession(node);
        if(node.getCompoundstm() != null)
        {
            node.getCompoundstm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSession() != null)
        {
            node.getSession().apply(this);
        }
        outASession(node);
    }

    public void inANoStm(ANoStm node)
    {
        defaultIn(node);
    }

    public void outANoStm(ANoStm node)
    {
        defaultOut(node);
    }

    public void caseANoStm(ANoStm node)
    {
        inANoStm(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outANoStm(node);
    }

    public void inAShowStm(AShowStm node)
    {
        defaultIn(node);
    }

    public void outAShowStm(AShowStm node)
    {
        defaultOut(node);
    }

    public void caseAShowStm(AShowStm node)
    {
        inAShowStm(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getReceive() != null)
        {
            node.getReceive().apply(this);
        }
        if(node.getDocument() != null)
        {
            node.getDocument().apply(this);
        }
        if(node.getShow() != null)
        {
            node.getShow().apply(this);
        }
        outAShowStm(node);
    }

    public void inAExitStm(AExitStm node)
    {
        defaultIn(node);
    }

    public void outAExitStm(AExitStm node)
    {
        defaultOut(node);
    }

    public void caseAExitStm(AExitStm node)
    {
        inAExitStm(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getDocument() != null)
        {
            node.getDocument().apply(this);
        }
        if(node.getExit() != null)
        {
            node.getExit().apply(this);
        }
        outAExitStm(node);
    }

    public void inAReturnStm(AReturnStm node)
    {
        defaultIn(node);
    }

    public void outAReturnStm(AReturnStm node)
    {
        defaultOut(node);
    }

    public void caseAReturnStm(AReturnStm node)
    {
        inAReturnStm(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnStm(node);
    }

    public void inARetexpStm(ARetexpStm node)
    {
        defaultIn(node);
    }

    public void outARetexpStm(ARetexpStm node)
    {
        defaultOut(node);
    }

    public void caseARetexpStm(ARetexpStm node)
    {
        inARetexpStm(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outARetexpStm(node);
    }

    public void inAIfStm(AIfStm node)
    {
        defaultIn(node);
    }

    public void outAIfStm(AIfStm node)
    {
        defaultOut(node);
    }

    public void caseAIfStm(AIfStm node)
    {
        inAIfStm(node);
        if(node.getStm() != null)
        {
            node.getStm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfStm(node);
    }

    public void inAIfelseStm(AIfelseStm node)
    {
        defaultIn(node);
    }

    public void outAIfelseStm(AIfelseStm node)
    {
        defaultOut(node);
    }

    public void caseAIfelseStm(AIfelseStm node)
    {
        inAIfelseStm(node);
        if(node.getElseStm() != null)
        {
            node.getElseStm().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getThenStm() != null)
        {
            node.getThenStm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfelseStm(node);
    }

    public void inAWhileStm(AWhileStm node)
    {
        defaultIn(node);
    }

    public void outAWhileStm(AWhileStm node)
    {
        defaultOut(node);
    }

    public void caseAWhileStm(AWhileStm node)
    {
        inAWhileStm(node);
        if(node.getStm() != null)
        {
            node.getStm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileStm(node);
    }

    public void inACompStm(ACompStm node)
    {
        defaultIn(node);
    }

    public void outACompStm(ACompStm node)
    {
        defaultOut(node);
    }

    public void caseACompStm(ACompStm node)
    {
        inACompStm(node);
        if(node.getCompoundstm() != null)
        {
            node.getCompoundstm().apply(this);
        }
        outACompStm(node);
    }

    public void inAExpStm(AExpStm node)
    {
        defaultIn(node);
    }

    public void outAExpStm(AExpStm node)
    {
        defaultOut(node);
    }

    public void caseAExpStm(AExpStm node)
    {
        inAExpStm(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpStm(node);
    }

    public void inANoStmNoShortIf(ANoStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outANoStmNoShortIf(ANoStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseANoStmNoShortIf(ANoStmNoShortIf node)
    {
        inANoStmNoShortIf(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outANoStmNoShortIf(node);
    }

    public void inAShowStmNoShortIf(AShowStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAShowStmNoShortIf(AShowStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseAShowStmNoShortIf(AShowStmNoShortIf node)
    {
        inAShowStmNoShortIf(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getReceive() != null)
        {
            node.getReceive().apply(this);
        }
        if(node.getDocument() != null)
        {
            node.getDocument().apply(this);
        }
        if(node.getShow() != null)
        {
            node.getShow().apply(this);
        }
        outAShowStmNoShortIf(node);
    }

    public void inAExitStmNoShortIf(AExitStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAExitStmNoShortIf(AExitStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseAExitStmNoShortIf(AExitStmNoShortIf node)
    {
        inAExitStmNoShortIf(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getDocument() != null)
        {
            node.getDocument().apply(this);
        }
        if(node.getExit() != null)
        {
            node.getExit().apply(this);
        }
        outAExitStmNoShortIf(node);
    }

    public void inAReturnStmNoShortIf(AReturnStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAReturnStmNoShortIf(AReturnStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseAReturnStmNoShortIf(AReturnStmNoShortIf node)
    {
        inAReturnStmNoShortIf(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnStmNoShortIf(node);
    }

    public void inARetexpStmNoShortIf(ARetexpStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outARetexpStmNoShortIf(ARetexpStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseARetexpStmNoShortIf(ARetexpStmNoShortIf node)
    {
        inARetexpStmNoShortIf(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outARetexpStmNoShortIf(node);
    }

    public void inAIfelseStmNoShortIf(AIfelseStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAIfelseStmNoShortIf(AIfelseStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseAIfelseStmNoShortIf(AIfelseStmNoShortIf node)
    {
        inAIfelseStmNoShortIf(node);
        if(node.getElseStm() != null)
        {
            node.getElseStm().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getThenStm() != null)
        {
            node.getThenStm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfelseStmNoShortIf(node);
    }

    public void inAWhileStmNoShortIf(AWhileStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAWhileStmNoShortIf(AWhileStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseAWhileStmNoShortIf(AWhileStmNoShortIf node)
    {
        inAWhileStmNoShortIf(node);
        if(node.getStmNoShortIf() != null)
        {
            node.getStmNoShortIf().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileStmNoShortIf(node);
    }

    public void inACompStmNoShortIf(ACompStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outACompStmNoShortIf(ACompStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseACompStmNoShortIf(ACompStmNoShortIf node)
    {
        inACompStmNoShortIf(node);
        if(node.getCompoundstm() != null)
        {
            node.getCompoundstm().apply(this);
        }
        outACompStmNoShortIf(node);
    }

    public void inAExpStmNoShortIf(AExpStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAExpStmNoShortIf(AExpStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseAExpStmNoShortIf(AExpStmNoShortIf node)
    {
        inAExpStmNoShortIf(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpStmNoShortIf(node);
    }

    public void inAIdDocument(AIdDocument node)
    {
        defaultIn(node);
    }

    public void outAIdDocument(AIdDocument node)
    {
        defaultOut(node);
    }

    public void caseAIdDocument(AIdDocument node)
    {
        inAIdDocument(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdDocument(node);
    }

    public void inAPlugDocument(APlugDocument node)
    {
        defaultIn(node);
    }

    public void outAPlugDocument(APlugDocument node)
    {
        defaultOut(node);
    }

    public void caseAPlugDocument(APlugDocument node)
    {
        inAPlugDocument(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getPlugs() != null)
        {
            node.getPlugs().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPlug() != null)
        {
            node.getPlug().apply(this);
        }
        outAPlugDocument(node);
    }

    public void inAReceive(AReceive node)
    {
        defaultIn(node);
    }

    public void outAReceive(AReceive node)
    {
        defaultOut(node);
    }

    public void caseAReceive(AReceive node)
    {
        inAReceive(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getInputs() != null)
        {
            node.getInputs().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getReceive() != null)
        {
            node.getReceive().apply(this);
        }
        outAReceive(node);
    }

    public void inACompoundstm(ACompoundstm node)
    {
        defaultIn(node);
    }

    public void outACompoundstm(ACompoundstm node)
    {
        defaultOut(node);
    }

    public void caseACompoundstm(ACompoundstm node)
    {
        inACompoundstm(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getStm().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStm) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getVariable().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PVariable) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        outACompoundstm(node);
    }

    public void inAOnePlugs(AOnePlugs node)
    {
        defaultIn(node);
    }

    public void outAOnePlugs(AOnePlugs node)
    {
        defaultOut(node);
    }

    public void caseAOnePlugs(AOnePlugs node)
    {
        inAOnePlugs(node);
        if(node.getPlug() != null)
        {
            node.getPlug().apply(this);
        }
        outAOnePlugs(node);
    }

    public void inAManyPlugs(AManyPlugs node)
    {
        defaultIn(node);
    }

    public void outAManyPlugs(AManyPlugs node)
    {
        defaultOut(node);
    }

    public void caseAManyPlugs(AManyPlugs node)
    {
        inAManyPlugs(node);
        if(node.getPlug() != null)
        {
            node.getPlug().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getPlugs() != null)
        {
            node.getPlugs().apply(this);
        }
        outAManyPlugs(node);
    }

    public void inAPlug(APlug node)
    {
        defaultIn(node);
    }

    public void outAPlug(APlug node)
    {
        defaultOut(node);
    }

    public void caseAPlug(APlug node)
    {
        inAPlug(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAPlug(node);
    }

    public void inAOneInputs(AOneInputs node)
    {
        defaultIn(node);
    }

    public void outAOneInputs(AOneInputs node)
    {
        defaultOut(node);
    }

    public void caseAOneInputs(AOneInputs node)
    {
        inAOneInputs(node);
        if(node.getInput() != null)
        {
            node.getInput().apply(this);
        }
        outAOneInputs(node);
    }

    public void inAManyInputs(AManyInputs node)
    {
        defaultIn(node);
    }

    public void outAManyInputs(AManyInputs node)
    {
        defaultOut(node);
    }

    public void caseAManyInputs(AManyInputs node)
    {
        inAManyInputs(node);
        if(node.getInput() != null)
        {
            node.getInput().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getInputs() != null)
        {
            node.getInputs().apply(this);
        }
        outAManyInputs(node);
    }

    public void inAInput(AInput node)
    {
        defaultIn(node);
    }

    public void outAInput(AInput node)
    {
        defaultOut(node);
    }

    public void caseAInput(AInput node)
    {
        inAInput(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getLvalue() != null)
        {
            node.getLvalue().apply(this);
        }
        outAInput(node);
    }

    public void inAAssignExp(AAssignExp node)
    {
        defaultIn(node);
    }

    public void outAAssignExp(AAssignExp node)
    {
        defaultOut(node);
    }

    public void caseAAssignExp(AAssignExp node)
    {
        inAAssignExp(node);
        if(node.getOrExp() != null)
        {
            node.getOrExp().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getLvalue() != null)
        {
            node.getLvalue().apply(this);
        }
        outAAssignExp(node);
    }

    public void inADefaultExp(ADefaultExp node)
    {
        defaultIn(node);
    }

    public void outADefaultExp(ADefaultExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultExp(ADefaultExp node)
    {
        inADefaultExp(node);
        if(node.getOrExp() != null)
        {
            node.getOrExp().apply(this);
        }
        outADefaultExp(node);
    }

    public void inAOrOrExp(AOrOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrOrExp(AOrOrExp node)
    {
        defaultOut(node);
    }

    public void caseAOrOrExp(AOrOrExp node)
    {
        inAOrOrExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrOrExp(node);
    }

    public void inADefaultOrExp(ADefaultOrExp node)
    {
        defaultIn(node);
    }

    public void outADefaultOrExp(ADefaultOrExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultOrExp(ADefaultOrExp node)
    {
        inADefaultOrExp(node);
        if(node.getAndExp() != null)
        {
            node.getAndExp().apply(this);
        }
        outADefaultOrExp(node);
    }

    public void inAAndAndExp(AAndAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndAndExp(AAndAndExp node)
    {
        defaultOut(node);
    }

    public void caseAAndAndExp(AAndAndExp node)
    {
        inAAndAndExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndAndExp(node);
    }

    public void inADefaultAndExp(ADefaultAndExp node)
    {
        defaultIn(node);
    }

    public void outADefaultAndExp(ADefaultAndExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultAndExp(ADefaultAndExp node)
    {
        inADefaultAndExp(node);
        if(node.getCmpExp() != null)
        {
            node.getCmpExp().apply(this);
        }
        outADefaultAndExp(node);
    }

    public void inAEqCmpExp(AEqCmpExp node)
    {
        defaultIn(node);
    }

    public void outAEqCmpExp(AEqCmpExp node)
    {
        defaultOut(node);
    }

    public void caseAEqCmpExp(AEqCmpExp node)
    {
        inAEqCmpExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqCmpExp(node);
    }

    public void inANeqCmpExp(ANeqCmpExp node)
    {
        defaultIn(node);
    }

    public void outANeqCmpExp(ANeqCmpExp node)
    {
        defaultOut(node);
    }

    public void caseANeqCmpExp(ANeqCmpExp node)
    {
        inANeqCmpExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outANeqCmpExp(node);
    }

    public void inALtCmpExp(ALtCmpExp node)
    {
        defaultIn(node);
    }

    public void outALtCmpExp(ALtCmpExp node)
    {
        defaultOut(node);
    }

    public void caseALtCmpExp(ALtCmpExp node)
    {
        inALtCmpExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALtCmpExp(node);
    }

    public void inAGtCmpExp(AGtCmpExp node)
    {
        defaultIn(node);
    }

    public void outAGtCmpExp(AGtCmpExp node)
    {
        defaultOut(node);
    }

    public void caseAGtCmpExp(AGtCmpExp node)
    {
        inAGtCmpExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGtCmpExp(node);
    }

    public void inALteqCmpExp(ALteqCmpExp node)
    {
        defaultIn(node);
    }

    public void outALteqCmpExp(ALteqCmpExp node)
    {
        defaultOut(node);
    }

    public void caseALteqCmpExp(ALteqCmpExp node)
    {
        inALteqCmpExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALteqCmpExp(node);
    }

    public void inAGteqCmpExp(AGteqCmpExp node)
    {
        defaultIn(node);
    }

    public void outAGteqCmpExp(AGteqCmpExp node)
    {
        defaultOut(node);
    }

    public void caseAGteqCmpExp(AGteqCmpExp node)
    {
        inAGteqCmpExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGteqCmpExp(node);
    }

    public void inADefaultCmpExp(ADefaultCmpExp node)
    {
        defaultIn(node);
    }

    public void outADefaultCmpExp(ADefaultCmpExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultCmpExp(ADefaultCmpExp node)
    {
        inADefaultCmpExp(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        outADefaultCmpExp(node);
    }

    public void inAPlusAddExp(APlusAddExp node)
    {
        defaultIn(node);
    }

    public void outAPlusAddExp(APlusAddExp node)
    {
        defaultOut(node);
    }

    public void caseAPlusAddExp(APlusAddExp node)
    {
        inAPlusAddExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAPlusAddExp(node);
    }

    public void inAMinusAddExp(AMinusAddExp node)
    {
        defaultIn(node);
    }

    public void outAMinusAddExp(AMinusAddExp node)
    {
        defaultOut(node);
    }

    public void caseAMinusAddExp(AMinusAddExp node)
    {
        inAMinusAddExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMinusAddExp(node);
    }

    public void inADefaultAddExp(ADefaultAddExp node)
    {
        defaultIn(node);
    }

    public void outADefaultAddExp(ADefaultAddExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultAddExp(ADefaultAddExp node)
    {
        inADefaultAddExp(node);
        if(node.getMultExp() != null)
        {
            node.getMultExp().apply(this);
        }
        outADefaultAddExp(node);
    }

    public void inAMultMultExp(AMultMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultMultExp(AMultMultExp node)
    {
        defaultOut(node);
    }

    public void caseAMultMultExp(AMultMultExp node)
    {
        inAMultMultExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMultMultExp(node);
    }

    public void inADivMultExp(ADivMultExp node)
    {
        defaultIn(node);
    }

    public void outADivMultExp(ADivMultExp node)
    {
        defaultOut(node);
    }

    public void caseADivMultExp(ADivMultExp node)
    {
        inADivMultExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivMultExp(node);
    }

    public void inAModMultExp(AModMultExp node)
    {
        defaultIn(node);
    }

    public void outAModMultExp(AModMultExp node)
    {
        defaultOut(node);
    }

    public void caseAModMultExp(AModMultExp node)
    {
        inAModMultExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAModMultExp(node);
    }

    public void inADefaultMultExp(ADefaultMultExp node)
    {
        defaultIn(node);
    }

    public void outADefaultMultExp(ADefaultMultExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultMultExp(ADefaultMultExp node)
    {
        inADefaultMultExp(node);
        if(node.getJoinExp() != null)
        {
            node.getJoinExp().apply(this);
        }
        outADefaultMultExp(node);
    }

    public void inAJoinJoinExp(AJoinJoinExp node)
    {
        defaultIn(node);
    }

    public void outAJoinJoinExp(AJoinJoinExp node)
    {
        defaultOut(node);
    }

    public void caseAJoinJoinExp(AJoinJoinExp node)
    {
        inAJoinJoinExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getJoin() != null)
        {
            node.getJoin().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAJoinJoinExp(node);
    }

    public void inADefaultJoinExp(ADefaultJoinExp node)
    {
        defaultIn(node);
    }

    public void outADefaultJoinExp(ADefaultJoinExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultJoinExp(ADefaultJoinExp node)
    {
        inADefaultJoinExp(node);
        if(node.getTupleExp() != null)
        {
            node.getTupleExp().apply(this);
        }
        outADefaultJoinExp(node);
    }

    public void inAKeepTupleExp(AKeepTupleExp node)
    {
        defaultIn(node);
    }

    public void outAKeepTupleExp(AKeepTupleExp node)
    {
        defaultOut(node);
    }

    public void caseAKeepTupleExp(AKeepTupleExp node)
    {
        inAKeepTupleExp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getKeep() != null)
        {
            node.getKeep().apply(this);
        }
        if(node.getTupleExp() != null)
        {
            node.getTupleExp().apply(this);
        }
        outAKeepTupleExp(node);
    }

    public void inARemoveTupleExp(ARemoveTupleExp node)
    {
        defaultIn(node);
    }

    public void outARemoveTupleExp(ARemoveTupleExp node)
    {
        defaultOut(node);
    }

    public void caseARemoveTupleExp(ARemoveTupleExp node)
    {
        inARemoveTupleExp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getRemove() != null)
        {
            node.getRemove().apply(this);
        }
        if(node.getTupleExp() != null)
        {
            node.getTupleExp().apply(this);
        }
        outARemoveTupleExp(node);
    }

    public void inAKeepManyTupleExp(AKeepManyTupleExp node)
    {
        defaultIn(node);
    }

    public void outAKeepManyTupleExp(AKeepManyTupleExp node)
    {
        defaultOut(node);
    }

    public void caseAKeepManyTupleExp(AKeepManyTupleExp node)
    {
        inAKeepManyTupleExp(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getIdentifiers() != null)
        {
            node.getIdentifiers().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getKeep() != null)
        {
            node.getKeep().apply(this);
        }
        if(node.getTupleExp() != null)
        {
            node.getTupleExp().apply(this);
        }
        outAKeepManyTupleExp(node);
    }

    public void inARemoveManyTupleExp(ARemoveManyTupleExp node)
    {
        defaultIn(node);
    }

    public void outARemoveManyTupleExp(ARemoveManyTupleExp node)
    {
        defaultOut(node);
    }

    public void caseARemoveManyTupleExp(ARemoveManyTupleExp node)
    {
        inARemoveManyTupleExp(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getIdentifiers() != null)
        {
            node.getIdentifiers().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getRemove() != null)
        {
            node.getRemove().apply(this);
        }
        if(node.getTupleExp() != null)
        {
            node.getTupleExp().apply(this);
        }
        outARemoveManyTupleExp(node);
    }

    public void inADefaultTupleExp(ADefaultTupleExp node)
    {
        defaultIn(node);
    }

    public void outADefaultTupleExp(ADefaultTupleExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultTupleExp(ADefaultTupleExp node)
    {
        inADefaultTupleExp(node);
        if(node.getUnaryExp() != null)
        {
            node.getUnaryExp().apply(this);
        }
        outADefaultTupleExp(node);
    }

    public void inANotUnaryExp(ANotUnaryExp node)
    {
        defaultIn(node);
    }

    public void outANotUnaryExp(ANotUnaryExp node)
    {
        defaultOut(node);
    }

    public void caseANotUnaryExp(ANotUnaryExp node)
    {
        inANotUnaryExp(node);
        if(node.getBaseExp() != null)
        {
            node.getBaseExp().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotUnaryExp(node);
    }

    public void inANegUnaryExp(ANegUnaryExp node)
    {
        defaultIn(node);
    }

    public void outANegUnaryExp(ANegUnaryExp node)
    {
        defaultOut(node);
    }

    public void caseANegUnaryExp(ANegUnaryExp node)
    {
        inANegUnaryExp(node);
        if(node.getBaseExp() != null)
        {
            node.getBaseExp().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outANegUnaryExp(node);
    }

    public void inADefaultUnaryExp(ADefaultUnaryExp node)
    {
        defaultIn(node);
    }

    public void outADefaultUnaryExp(ADefaultUnaryExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultUnaryExp(ADefaultUnaryExp node)
    {
        inADefaultUnaryExp(node);
        if(node.getBaseExp() != null)
        {
            node.getBaseExp().apply(this);
        }
        outADefaultUnaryExp(node);
    }

    public void inALvalueBaseExp(ALvalueBaseExp node)
    {
        defaultIn(node);
    }

    public void outALvalueBaseExp(ALvalueBaseExp node)
    {
        defaultOut(node);
    }

    public void caseALvalueBaseExp(ALvalueBaseExp node)
    {
        inALvalueBaseExp(node);
        if(node.getLvalue() != null)
        {
            node.getLvalue().apply(this);
        }
        outALvalueBaseExp(node);
    }

    public void inACallBaseExp(ACallBaseExp node)
    {
        defaultIn(node);
    }

    public void outACallBaseExp(ACallBaseExp node)
    {
        defaultOut(node);
    }

    public void caseACallBaseExp(ACallBaseExp node)
    {
        inACallBaseExp(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExps() != null)
        {
            node.getExps().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outACallBaseExp(node);
    }

    public void inAIntBaseExp(AIntBaseExp node)
    {
        defaultIn(node);
    }

    public void outAIntBaseExp(AIntBaseExp node)
    {
        defaultOut(node);
    }

    public void caseAIntBaseExp(AIntBaseExp node)
    {
        inAIntBaseExp(node);
        if(node.getIntconst() != null)
        {
            node.getIntconst().apply(this);
        }
        outAIntBaseExp(node);
    }

    public void inATrueBaseExp(ATrueBaseExp node)
    {
        defaultIn(node);
    }

    public void outATrueBaseExp(ATrueBaseExp node)
    {
        defaultOut(node);
    }

    public void caseATrueBaseExp(ATrueBaseExp node)
    {
        inATrueBaseExp(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBaseExp(node);
    }

    public void inAFalseBaseExp(AFalseBaseExp node)
    {
        defaultIn(node);
    }

    public void outAFalseBaseExp(AFalseBaseExp node)
    {
        defaultOut(node);
    }

    public void caseAFalseBaseExp(AFalseBaseExp node)
    {
        inAFalseBaseExp(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBaseExp(node);
    }

    public void inAStringBaseExp(AStringBaseExp node)
    {
        defaultIn(node);
    }

    public void outAStringBaseExp(AStringBaseExp node)
    {
        defaultOut(node);
    }

    public void caseAStringBaseExp(AStringBaseExp node)
    {
        inAStringBaseExp(node);
        if(node.getStringconst() != null)
        {
            node.getStringconst().apply(this);
        }
        outAStringBaseExp(node);
    }

    public void inATupleBaseExp(ATupleBaseExp node)
    {
        defaultIn(node);
    }

    public void outATupleBaseExp(ATupleBaseExp node)
    {
        defaultOut(node);
    }

    public void caseATupleBaseExp(ATupleBaseExp node)
    {
        inATupleBaseExp(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getFieldvalues() != null)
        {
            node.getFieldvalues().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getTuple() != null)
        {
            node.getTuple().apply(this);
        }
        outATupleBaseExp(node);
    }

    public void inAParenBaseExp(AParenBaseExp node)
    {
        defaultIn(node);
    }

    public void outAParenBaseExp(AParenBaseExp node)
    {
        defaultOut(node);
    }

    public void caseAParenBaseExp(AParenBaseExp node)
    {
        inAParenBaseExp(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParenBaseExp(node);
    }

    public void inAOneExps(AOneExps node)
    {
        defaultIn(node);
    }

    public void outAOneExps(AOneExps node)
    {
        defaultOut(node);
    }

    public void caseAOneExps(AOneExps node)
    {
        inAOneExps(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAOneExps(node);
    }

    public void inAManyExps(AManyExps node)
    {
        defaultIn(node);
    }

    public void outAManyExps(AManyExps node)
    {
        defaultOut(node);
    }

    public void caseAManyExps(AManyExps node)
    {
        inAManyExps(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExps() != null)
        {
            node.getExps().apply(this);
        }
        outAManyExps(node);
    }

    public void inASimpleLvalue(ASimpleLvalue node)
    {
        defaultIn(node);
    }

    public void outASimpleLvalue(ASimpleLvalue node)
    {
        defaultOut(node);
    }

    public void caseASimpleLvalue(ASimpleLvalue node)
    {
        inASimpleLvalue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASimpleLvalue(node);
    }

    public void inAQualifiedLvalue(AQualifiedLvalue node)
    {
        defaultIn(node);
    }

    public void outAQualifiedLvalue(AQualifiedLvalue node)
    {
        defaultOut(node);
    }

    public void caseAQualifiedLvalue(AQualifiedLvalue node)
    {
        inAQualifiedLvalue(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAQualifiedLvalue(node);
    }

    public void inAOneFieldvalues(AOneFieldvalues node)
    {
        defaultIn(node);
    }

    public void outAOneFieldvalues(AOneFieldvalues node)
    {
        defaultOut(node);
    }

    public void caseAOneFieldvalues(AOneFieldvalues node)
    {
        inAOneFieldvalues(node);
        if(node.getFieldvalue() != null)
        {
            node.getFieldvalue().apply(this);
        }
        outAOneFieldvalues(node);
    }

    public void inAManyFieldvalues(AManyFieldvalues node)
    {
        defaultIn(node);
    }

    public void outAManyFieldvalues(AManyFieldvalues node)
    {
        defaultOut(node);
    }

    public void caseAManyFieldvalues(AManyFieldvalues node)
    {
        inAManyFieldvalues(node);
        if(node.getFieldvalue() != null)
        {
            node.getFieldvalue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFieldvalues() != null)
        {
            node.getFieldvalues().apply(this);
        }
        outAManyFieldvalues(node);
    }

    public void inAFieldvalue(AFieldvalue node)
    {
        defaultIn(node);
    }

    public void outAFieldvalue(AFieldvalue node)
    {
        defaultOut(node);
    }

    public void caseAFieldvalue(AFieldvalue node)
    {
        inAFieldvalue(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFieldvalue(node);
    }
}
