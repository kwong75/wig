/* This file was generated by SableCC (http://www.sablecc.org/). */

package wig.parser;

import wig.lexer.*;
import wig.node.*;
import wig.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
	this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!stack.hasNext())
        {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(lexer.next());
                        push(action[1], list, false);
                        last_shift = action[1];
                    }
		    break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0: /* reduce AAservice1Service */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAservice2Service */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce AAservice3Service */
		    {
			ArrayList list = new2();
			push(goTo(0), list, false);
		    }
		    break;
                    case 3: /* reduce AAservice4Service */
		    {
			ArrayList list = new3();
			push(goTo(0), list, false);
		    }
		    break;
                    case 4: /* reduce AAservice5Service */
		    {
			ArrayList list = new4();
			push(goTo(0), list, false);
		    }
		    break;
                    case 5: /* reduce AAservice6Service */
		    {
			ArrayList list = new5();
			push(goTo(0), list, false);
		    }
		    break;
                    case 6: /* reduce AAservice7Service */
		    {
			ArrayList list = new6();
			push(goTo(0), list, false);
		    }
		    break;
                    case 7: /* reduce AAservice8Service */
		    {
			ArrayList list = new7();
			push(goTo(0), list, false);
		    }
		    break;
                    case 8: /* reduce AAhtml1Html */
		    {
			ArrayList list = new8();
			push(goTo(1), list, false);
		    }
		    break;
                    case 9: /* reduce AAhtml2Html */
		    {
			ArrayList list = new9();
			push(goTo(1), list, false);
		    }
		    break;
                    case 10: /* reduce AAtagstarthtmlbody1Htmlbody */
		    {
			ArrayList list = new10();
			push(goTo(2), list, false);
		    }
		    break;
                    case 11: /* reduce AAtagstarthtmlbody2Htmlbody */
		    {
			ArrayList list = new11();
			push(goTo(2), list, false);
		    }
		    break;
                    case 12: /* reduce ATagEndHtmlbody */
		    {
			ArrayList list = new12();
			push(goTo(2), list, false);
		    }
		    break;
                    case 13: /* reduce AHoleHtmlbody */
		    {
			ArrayList list = new13();
			push(goTo(2), list, false);
		    }
		    break;
                    case 14: /* reduce AWhateverHtmlbody */
		    {
			ArrayList list = new14();
			push(goTo(2), list, false);
		    }
		    break;
                    case 15: /* reduce AMetaHtmlbody */
		    {
			ArrayList list = new15();
			push(goTo(2), list, false);
		    }
		    break;
                    case 16: /* reduce AInputHtmlbody */
		    {
			ArrayList list = new16();
			push(goTo(2), list, false);
		    }
		    break;
                    case 17: /* reduce AAselecthtmlbody1Htmlbody */
		    {
			ArrayList list = new17();
			push(goTo(2), list, false);
		    }
		    break;
                    case 18: /* reduce AAselecthtmlbody2Htmlbody */
		    {
			ArrayList list = new18();
			push(goTo(2), list, false);
		    }
		    break;
                    case 19: /* reduce ANameInputattr */
		    {
			ArrayList list = new19();
			push(goTo(3), list, false);
		    }
		    break;
                    case 20: /* reduce ATypeInputattr */
		    {
			ArrayList list = new20();
			push(goTo(3), list, false);
		    }
		    break;
                    case 21: /* reduce AAttributeInputattr */
		    {
			ArrayList list = new21();
			push(goTo(3), list, false);
		    }
		    break;
                    case 22: /* reduce ATextInputtype */
		    {
			ArrayList list = new22();
			push(goTo(4), list, false);
		    }
		    break;
                    case 23: /* reduce ARadioInputtype */
		    {
			ArrayList list = new23();
			push(goTo(4), list, false);
		    }
		    break;
                    case 24: /* reduce AAttrAttribute */
		    {
			ArrayList list = new24();
			push(goTo(5), list, false);
		    }
		    break;
                    case 25: /* reduce AAssignAttribute */
		    {
			ArrayList list = new25();
			push(goTo(5), list, false);
		    }
		    break;
                    case 26: /* reduce AIdAttr */
		    {
			ArrayList list = new26();
			push(goTo(6), list, false);
		    }
		    break;
                    case 27: /* reduce AIntAttr */
		    {
			ArrayList list = new27();
			push(goTo(6), list, false);
		    }
		    break;
                    case 28: /* reduce AStrAttr */
		    {
			ArrayList list = new28();
			push(goTo(6), list, false);
		    }
		    break;
                    case 29: /* reduce AAschema1Schema */
		    {
			ArrayList list = new29();
			push(goTo(7), list, false);
		    }
		    break;
                    case 30: /* reduce AAschema2Schema */
		    {
			ArrayList list = new30();
			push(goTo(7), list, false);
		    }
		    break;
                    case 31: /* reduce AField */
		    {
			ArrayList list = new31();
			push(goTo(8), list, false);
		    }
		    break;
                    case 32: /* reduce AVariable */
		    {
			ArrayList list = new32();
			push(goTo(9), list, false);
		    }
		    break;
                    case 33: /* reduce AOneIdentifiers */
		    {
			ArrayList list = new33();
			push(goTo(10), list, false);
		    }
		    break;
                    case 34: /* reduce AManyIdentifiers */
		    {
			ArrayList list = new34();
			push(goTo(10), list, false);
		    }
		    break;
                    case 35: /* reduce AIntSimpletype */
		    {
			ArrayList list = new35();
			push(goTo(11), list, false);
		    }
		    break;
                    case 36: /* reduce ABoolSimpletype */
		    {
			ArrayList list = new36();
			push(goTo(11), list, false);
		    }
		    break;
                    case 37: /* reduce AStringSimpletype */
		    {
			ArrayList list = new37();
			push(goTo(11), list, false);
		    }
		    break;
                    case 38: /* reduce AVoidSimpletype */
		    {
			ArrayList list = new38();
			push(goTo(11), list, false);
		    }
		    break;
                    case 39: /* reduce ASimpleType */
		    {
			ArrayList list = new39();
			push(goTo(12), list, false);
		    }
		    break;
                    case 40: /* reduce ATupleType */
		    {
			ArrayList list = new40();
			push(goTo(12), list, false);
		    }
		    break;
                    case 41: /* reduce AAfunction1Function */
		    {
			ArrayList list = new41();
			push(goTo(13), list, false);
		    }
		    break;
                    case 42: /* reduce AAfunction2Function */
		    {
			ArrayList list = new42();
			push(goTo(13), list, false);
		    }
		    break;
                    case 43: /* reduce AOneArguments */
		    {
			ArrayList list = new43();
			push(goTo(14), list, false);
		    }
		    break;
                    case 44: /* reduce AManyArguments */
		    {
			ArrayList list = new44();
			push(goTo(14), list, false);
		    }
		    break;
                    case 45: /* reduce AArgument */
		    {
			ArrayList list = new45();
			push(goTo(15), list, false);
		    }
		    break;
                    case 46: /* reduce ASession */
		    {
			ArrayList list = new46();
			push(goTo(16), list, false);
		    }
		    break;
                    case 47: /* reduce ANoStm */
		    {
			ArrayList list = new47();
			push(goTo(17), list, false);
		    }
		    break;
                    case 48: /* reduce AAshowstm1Stm */
		    {
			ArrayList list = new48();
			push(goTo(17), list, false);
		    }
		    break;
                    case 49: /* reduce AAshowstm2Stm */
		    {
			ArrayList list = new49();
			push(goTo(17), list, false);
		    }
		    break;
                    case 50: /* reduce AExitStm */
		    {
			ArrayList list = new50();
			push(goTo(17), list, false);
		    }
		    break;
                    case 51: /* reduce AReturnStm */
		    {
			ArrayList list = new51();
			push(goTo(17), list, false);
		    }
		    break;
                    case 52: /* reduce ARetexpStm */
		    {
			ArrayList list = new52();
			push(goTo(17), list, false);
		    }
		    break;
                    case 53: /* reduce AIfStm */
		    {
			ArrayList list = new53();
			push(goTo(17), list, false);
		    }
		    break;
                    case 54: /* reduce AIfelseStm */
		    {
			ArrayList list = new54();
			push(goTo(17), list, false);
		    }
		    break;
                    case 55: /* reduce AWhileStm */
		    {
			ArrayList list = new55();
			push(goTo(17), list, false);
		    }
		    break;
                    case 56: /* reduce ACompStm */
		    {
			ArrayList list = new56();
			push(goTo(17), list, false);
		    }
		    break;
                    case 57: /* reduce AExpStm */
		    {
			ArrayList list = new57();
			push(goTo(17), list, false);
		    }
		    break;
                    case 58: /* reduce ANoStmNoShortIf */
		    {
			ArrayList list = new58();
			push(goTo(18), list, false);
		    }
		    break;
                    case 59: /* reduce AAshowstmnoshortif1StmNoShortIf */
		    {
			ArrayList list = new59();
			push(goTo(18), list, false);
		    }
		    break;
                    case 60: /* reduce AAshowstmnoshortif2StmNoShortIf */
		    {
			ArrayList list = new60();
			push(goTo(18), list, false);
		    }
		    break;
                    case 61: /* reduce AExitStmNoShortIf */
		    {
			ArrayList list = new61();
			push(goTo(18), list, false);
		    }
		    break;
                    case 62: /* reduce AReturnStmNoShortIf */
		    {
			ArrayList list = new62();
			push(goTo(18), list, false);
		    }
		    break;
                    case 63: /* reduce ARetexpStmNoShortIf */
		    {
			ArrayList list = new63();
			push(goTo(18), list, false);
		    }
		    break;
                    case 64: /* reduce AIfelseStmNoShortIf */
		    {
			ArrayList list = new64();
			push(goTo(18), list, false);
		    }
		    break;
                    case 65: /* reduce AWhileStmNoShortIf */
		    {
			ArrayList list = new65();
			push(goTo(18), list, false);
		    }
		    break;
                    case 66: /* reduce ACompStmNoShortIf */
		    {
			ArrayList list = new66();
			push(goTo(18), list, false);
		    }
		    break;
                    case 67: /* reduce AExpStmNoShortIf */
		    {
			ArrayList list = new67();
			push(goTo(18), list, false);
		    }
		    break;
                    case 68: /* reduce AIdDocument */
		    {
			ArrayList list = new68();
			push(goTo(19), list, false);
		    }
		    break;
                    case 69: /* reduce APlugDocument */
		    {
			ArrayList list = new69();
			push(goTo(19), list, false);
		    }
		    break;
                    case 70: /* reduce AReceive */
		    {
			ArrayList list = new70();
			push(goTo(20), list, false);
		    }
		    break;
                    case 71: /* reduce AAcompoundstm1Compoundstm */
		    {
			ArrayList list = new71();
			push(goTo(21), list, false);
		    }
		    break;
                    case 72: /* reduce AAcompoundstm2Compoundstm */
		    {
			ArrayList list = new72();
			push(goTo(21), list, false);
		    }
		    break;
                    case 73: /* reduce AAcompoundstm3Compoundstm */
		    {
			ArrayList list = new73();
			push(goTo(21), list, false);
		    }
		    break;
                    case 74: /* reduce AAcompoundstm4Compoundstm */
		    {
			ArrayList list = new74();
			push(goTo(21), list, false);
		    }
		    break;
                    case 75: /* reduce AOnePlugs */
		    {
			ArrayList list = new75();
			push(goTo(22), list, false);
		    }
		    break;
                    case 76: /* reduce AManyPlugs */
		    {
			ArrayList list = new76();
			push(goTo(22), list, false);
		    }
		    break;
                    case 77: /* reduce APlug */
		    {
			ArrayList list = new77();
			push(goTo(23), list, false);
		    }
		    break;
                    case 78: /* reduce AOneInputs */
		    {
			ArrayList list = new78();
			push(goTo(24), list, false);
		    }
		    break;
                    case 79: /* reduce AManyInputs */
		    {
			ArrayList list = new79();
			push(goTo(24), list, false);
		    }
		    break;
                    case 80: /* reduce AInput */
		    {
			ArrayList list = new80();
			push(goTo(25), list, false);
		    }
		    break;
                    case 81: /* reduce AAssignExp */
		    {
			ArrayList list = new81();
			push(goTo(26), list, false);
		    }
		    break;
                    case 82: /* reduce ADefaultExp */
		    {
			ArrayList list = new82();
			push(goTo(26), list, false);
		    }
		    break;
                    case 83: /* reduce AOrOrExp */
		    {
			ArrayList list = new83();
			push(goTo(27), list, false);
		    }
		    break;
                    case 84: /* reduce ADefaultOrExp */
		    {
			ArrayList list = new84();
			push(goTo(27), list, false);
		    }
		    break;
                    case 85: /* reduce AAndAndExp */
		    {
			ArrayList list = new85();
			push(goTo(28), list, false);
		    }
		    break;
                    case 86: /* reduce ADefaultAndExp */
		    {
			ArrayList list = new86();
			push(goTo(28), list, false);
		    }
		    break;
                    case 87: /* reduce AEqCmpExp */
		    {
			ArrayList list = new87();
			push(goTo(29), list, false);
		    }
		    break;
                    case 88: /* reduce ANeqCmpExp */
		    {
			ArrayList list = new88();
			push(goTo(29), list, false);
		    }
		    break;
                    case 89: /* reduce ALtCmpExp */
		    {
			ArrayList list = new89();
			push(goTo(29), list, false);
		    }
		    break;
                    case 90: /* reduce AGtCmpExp */
		    {
			ArrayList list = new90();
			push(goTo(29), list, false);
		    }
		    break;
                    case 91: /* reduce ALteqCmpExp */
		    {
			ArrayList list = new91();
			push(goTo(29), list, false);
		    }
		    break;
                    case 92: /* reduce AGteqCmpExp */
		    {
			ArrayList list = new92();
			push(goTo(29), list, false);
		    }
		    break;
                    case 93: /* reduce ADefaultCmpExp */
		    {
			ArrayList list = new93();
			push(goTo(29), list, false);
		    }
		    break;
                    case 94: /* reduce APlusAddExp */
		    {
			ArrayList list = new94();
			push(goTo(30), list, false);
		    }
		    break;
                    case 95: /* reduce AMinusAddExp */
		    {
			ArrayList list = new95();
			push(goTo(30), list, false);
		    }
		    break;
                    case 96: /* reduce ADefaultAddExp */
		    {
			ArrayList list = new96();
			push(goTo(30), list, false);
		    }
		    break;
                    case 97: /* reduce AMultMultExp */
		    {
			ArrayList list = new97();
			push(goTo(31), list, false);
		    }
		    break;
                    case 98: /* reduce ADivMultExp */
		    {
			ArrayList list = new98();
			push(goTo(31), list, false);
		    }
		    break;
                    case 99: /* reduce AModMultExp */
		    {
			ArrayList list = new99();
			push(goTo(31), list, false);
		    }
		    break;
                    case 100: /* reduce ADefaultMultExp */
		    {
			ArrayList list = new100();
			push(goTo(31), list, false);
		    }
		    break;
                    case 101: /* reduce AJoinJoinExp */
		    {
			ArrayList list = new101();
			push(goTo(32), list, false);
		    }
		    break;
                    case 102: /* reduce ADefaultJoinExp */
		    {
			ArrayList list = new102();
			push(goTo(32), list, false);
		    }
		    break;
                    case 103: /* reduce AKeepTupleExp */
		    {
			ArrayList list = new103();
			push(goTo(33), list, false);
		    }
		    break;
                    case 104: /* reduce ARemoveTupleExp */
		    {
			ArrayList list = new104();
			push(goTo(33), list, false);
		    }
		    break;
                    case 105: /* reduce AKeepManyTupleExp */
		    {
			ArrayList list = new105();
			push(goTo(33), list, false);
		    }
		    break;
                    case 106: /* reduce ARemoveManyTupleExp */
		    {
			ArrayList list = new106();
			push(goTo(33), list, false);
		    }
		    break;
                    case 107: /* reduce ADefaultTupleExp */
		    {
			ArrayList list = new107();
			push(goTo(33), list, false);
		    }
		    break;
                    case 108: /* reduce ANotUnaryExp */
		    {
			ArrayList list = new108();
			push(goTo(34), list, false);
		    }
		    break;
                    case 109: /* reduce ANegUnaryExp */
		    {
			ArrayList list = new109();
			push(goTo(34), list, false);
		    }
		    break;
                    case 110: /* reduce ADefaultUnaryExp */
		    {
			ArrayList list = new110();
			push(goTo(34), list, false);
		    }
		    break;
                    case 111: /* reduce ALvalueBaseExp */
		    {
			ArrayList list = new111();
			push(goTo(35), list, false);
		    }
		    break;
                    case 112: /* reduce AAcallbaseexp1BaseExp */
		    {
			ArrayList list = new112();
			push(goTo(35), list, false);
		    }
		    break;
                    case 113: /* reduce AAcallbaseexp2BaseExp */
		    {
			ArrayList list = new113();
			push(goTo(35), list, false);
		    }
		    break;
                    case 114: /* reduce AIntBaseExp */
		    {
			ArrayList list = new114();
			push(goTo(35), list, false);
		    }
		    break;
                    case 115: /* reduce ATrueBaseExp */
		    {
			ArrayList list = new115();
			push(goTo(35), list, false);
		    }
		    break;
                    case 116: /* reduce AFalseBaseExp */
		    {
			ArrayList list = new116();
			push(goTo(35), list, false);
		    }
		    break;
                    case 117: /* reduce AStringBaseExp */
		    {
			ArrayList list = new117();
			push(goTo(35), list, false);
		    }
		    break;
                    case 118: /* reduce AAtuplebaseexp1BaseExp */
		    {
			ArrayList list = new118();
			push(goTo(35), list, false);
		    }
		    break;
                    case 119: /* reduce AAtuplebaseexp2BaseExp */
		    {
			ArrayList list = new119();
			push(goTo(35), list, false);
		    }
		    break;
                    case 120: /* reduce AParenBaseExp */
		    {
			ArrayList list = new120();
			push(goTo(35), list, false);
		    }
		    break;
                    case 121: /* reduce AOneExps */
		    {
			ArrayList list = new121();
			push(goTo(36), list, false);
		    }
		    break;
                    case 122: /* reduce AManyExps */
		    {
			ArrayList list = new122();
			push(goTo(36), list, false);
		    }
		    break;
                    case 123: /* reduce ASimpleLvalue */
		    {
			ArrayList list = new123();
			push(goTo(37), list, false);
		    }
		    break;
                    case 124: /* reduce AQualifiedLvalue */
		    {
			ArrayList list = new124();
			push(goTo(37), list, false);
		    }
		    break;
                    case 125: /* reduce AOneFieldvalues */
		    {
			ArrayList list = new125();
			push(goTo(38), list, false);
		    }
		    break;
                    case 126: /* reduce AManyFieldvalues */
		    {
			ArrayList list = new126();
			push(goTo(38), list, false);
		    }
		    break;
                    case 127: /* reduce AFieldvalue */
		    {
			ArrayList list = new127();
			push(goTo(39), list, false);
		    }
		    break;
                    case 128: /* reduce ATerminal$Html */
		    {
			ArrayList list = new128();
			push(goTo(40), list, true);
		    }
		    break;
                    case 129: /* reduce ANonTerminal$Html */
		    {
			ArrayList list = new129();
			push(goTo(40), list, true);
		    }
		    break;
                    case 130: /* reduce ATerminal$Session */
		    {
			ArrayList list = new130();
			push(goTo(41), list, true);
		    }
		    break;
                    case 131: /* reduce ANonTerminal$Session */
		    {
			ArrayList list = new131();
			push(goTo(41), list, true);
		    }
		    break;
                    case 132: /* reduce ATerminal$Schema */
		    {
			ArrayList list = new132();
			push(goTo(42), list, true);
		    }
		    break;
                    case 133: /* reduce ANonTerminal$Schema */
		    {
			ArrayList list = new133();
			push(goTo(42), list, true);
		    }
		    break;
                    case 134: /* reduce ATerminal$Variable */
		    {
			ArrayList list = new134();
			push(goTo(43), list, true);
		    }
		    break;
                    case 135: /* reduce ANonTerminal$Variable */
		    {
			ArrayList list = new135();
			push(goTo(43), list, true);
		    }
		    break;
                    case 136: /* reduce ATerminal$Function */
		    {
			ArrayList list = new136();
			push(goTo(44), list, true);
		    }
		    break;
                    case 137: /* reduce ANonTerminal$Function */
		    {
			ArrayList list = new137();
			push(goTo(44), list, true);
		    }
		    break;
                    case 138: /* reduce ATerminal$Htmlbody */
		    {
			ArrayList list = new138();
			push(goTo(45), list, true);
		    }
		    break;
                    case 139: /* reduce ANonTerminal$Htmlbody */
		    {
			ArrayList list = new139();
			push(goTo(45), list, true);
		    }
		    break;
                    case 140: /* reduce ATerminal$Attribute */
		    {
			ArrayList list = new140();
			push(goTo(46), list, true);
		    }
		    break;
                    case 141: /* reduce ANonTerminal$Attribute */
		    {
			ArrayList list = new141();
			push(goTo(46), list, true);
		    }
		    break;
                    case 142: /* reduce ATerminal$Inputattr */
		    {
			ArrayList list = new142();
			push(goTo(47), list, true);
		    }
		    break;
                    case 143: /* reduce ANonTerminal$Inputattr */
		    {
			ArrayList list = new143();
			push(goTo(47), list, true);
		    }
		    break;
                    case 144: /* reduce ATerminal$Field */
		    {
			ArrayList list = new144();
			push(goTo(48), list, true);
		    }
		    break;
                    case 145: /* reduce ANonTerminal$Field */
		    {
			ArrayList list = new145();
			push(goTo(48), list, true);
		    }
		    break;
                    case 146: /* reduce ATerminal$Stm */
		    {
			ArrayList list = new146();
			push(goTo(49), list, true);
		    }
		    break;
                    case 147: /* reduce ANonTerminal$Stm */
		    {
			ArrayList list = new147();
			push(goTo(49), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PService node1 = (PService) ((ArrayList)pop()).get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }



    ArrayList new0() /* reduce AAservice1Service */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PService pserviceNode1;
        {
        TService tserviceNode2;
        TLBrace tlbraceNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        TypedLinkedList listNode10 = new TypedLinkedList();
        TRBrace trbraceNode11;
        tserviceNode2 = (TService)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
        }
        {
        }
        {
        }
        {
        TypedLinkedList listNode9 = new TypedLinkedList();
        listNode9 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList5.get(0);

        pserviceNode1 = new AService(tserviceNode2, tlbraceNode3, listNode5, listNode6, listNode7, listNode8, listNode10, trbraceNode11);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    ArrayList new1() /* reduce AAservice2Service */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PService pserviceNode1;
        {
        TService tserviceNode2;
        TLBrace tlbraceNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        TypedLinkedList listNode11 = new TypedLinkedList();
        TRBrace trbraceNode12;
        tserviceNode2 = (TService)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        }
        {
        }
        {
        TypedLinkedList listNode10 = new TypedLinkedList();
        listNode10 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        trbraceNode12 = (TRBrace)nodeArrayList6.get(0);

        pserviceNode1 = new AService(tserviceNode2, tlbraceNode3, listNode5, listNode7, listNode8, listNode9, listNode11, trbraceNode12);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    ArrayList new2() /* reduce AAservice3Service */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PService pserviceNode1;
        {
        TService tserviceNode2;
        TLBrace tlbraceNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        TypedLinkedList listNode11 = new TypedLinkedList();
        TRBrace trbraceNode12;
        tserviceNode2 = (TService)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
        }
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
        }
        {
        TypedLinkedList listNode10 = new TypedLinkedList();
        listNode10 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        trbraceNode12 = (TRBrace)nodeArrayList6.get(0);

        pserviceNode1 = new AService(tserviceNode2, tlbraceNode3, listNode5, listNode6, listNode8, listNode9, listNode11, trbraceNode12);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    ArrayList new3() /* reduce AAservice4Service */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PService pserviceNode1;
        {
        TService tserviceNode2;
        TLBrace tlbraceNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        TypedLinkedList listNode10 = new TypedLinkedList();
        TypedLinkedList listNode12 = new TypedLinkedList();
        TRBrace trbraceNode13;
        tserviceNode2 = (TService)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        TypedLinkedList listNode8 = new TypedLinkedList();
        listNode8 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
        }
        {
        TypedLinkedList listNode11 = new TypedLinkedList();
        listNode11 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
        trbraceNode13 = (TRBrace)nodeArrayList7.get(0);

        pserviceNode1 = new AService(tserviceNode2, tlbraceNode3, listNode5, listNode7, listNode9, listNode10, listNode12, trbraceNode13);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    ArrayList new4() /* reduce AAservice5Service */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PService pserviceNode1;
        {
        TService tserviceNode2;
        TLBrace tlbraceNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        TypedLinkedList listNode11 = new TypedLinkedList();
        TRBrace trbraceNode12;
        tserviceNode2 = (TService)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
        }
        {
        }
        {
        TypedLinkedList listNode8 = new TypedLinkedList();
        listNode8 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
        TypedLinkedList listNode10 = new TypedLinkedList();
        listNode10 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        trbraceNode12 = (TRBrace)nodeArrayList6.get(0);

        pserviceNode1 = new AService(tserviceNode2, tlbraceNode3, listNode5, listNode6, listNode7, listNode9, listNode11, trbraceNode12);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    ArrayList new5() /* reduce AAservice6Service */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PService pserviceNode1;
        {
        TService tserviceNode2;
        TLBrace tlbraceNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        TypedLinkedList listNode10 = new TypedLinkedList();
        TypedLinkedList listNode12 = new TypedLinkedList();
        TRBrace trbraceNode13;
        tserviceNode2 = (TService)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        }
        {
        TypedLinkedList listNode9 = new TypedLinkedList();
        listNode9 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
        TypedLinkedList listNode11 = new TypedLinkedList();
        listNode11 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
        trbraceNode13 = (TRBrace)nodeArrayList7.get(0);

        pserviceNode1 = new AService(tserviceNode2, tlbraceNode3, listNode5, listNode7, listNode8, listNode10, listNode12, trbraceNode13);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    ArrayList new6() /* reduce AAservice7Service */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PService pserviceNode1;
        {
        TService tserviceNode2;
        TLBrace tlbraceNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        TypedLinkedList listNode10 = new TypedLinkedList();
        TypedLinkedList listNode12 = new TypedLinkedList();
        TRBrace trbraceNode13;
        tserviceNode2 = (TService)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
        }
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
        TypedLinkedList listNode9 = new TypedLinkedList();
        listNode9 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
        TypedLinkedList listNode11 = new TypedLinkedList();
        listNode11 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
        trbraceNode13 = (TRBrace)nodeArrayList7.get(0);

        pserviceNode1 = new AService(tserviceNode2, tlbraceNode3, listNode5, listNode6, listNode8, listNode10, listNode12, trbraceNode13);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    ArrayList new7() /* reduce AAservice8Service */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PService pserviceNode1;
        {
        TService tserviceNode2;
        TLBrace tlbraceNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        TypedLinkedList listNode11 = new TypedLinkedList();
        TypedLinkedList listNode13 = new TypedLinkedList();
        TRBrace trbraceNode14;
        tserviceNode2 = (TService)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        TypedLinkedList listNode8 = new TypedLinkedList();
        listNode8 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
        TypedLinkedList listNode10 = new TypedLinkedList();
        listNode10 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        {
        TypedLinkedList listNode12 = new TypedLinkedList();
        listNode12 = (TypedLinkedList)nodeArrayList7.get(0);
	if(listNode12 != null)
	{
	  listNode13.addAll(listNode12);
	}
        }
        trbraceNode14 = (TRBrace)nodeArrayList8.get(0);

        pserviceNode1 = new AService(tserviceNode2, tlbraceNode3, listNode5, listNode7, listNode9, listNode11, listNode13, trbraceNode14);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    ArrayList new8() /* reduce AAhtml1Html */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PHtml phtmlNode1;
        {
        TConst tconstNode2;
        THtml thtmlNode3;
        TIdentifier tidentifierNode4;
        TAssign tassignNode5;
        THtmlTagStart thtmltagstartNode6;
        TypedLinkedList listNode7 = new TypedLinkedList();
        THtmlTagEnd thtmltagendNode8;
        TSemicolon tsemicolonNode9;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        thtmlNode3 = (THtml)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tassignNode5 = (TAssign)nodeArrayList4.get(0);
        thtmltagstartNode6 = (THtmlTagStart)nodeArrayList5.get(0);
        {
        }
        thtmltagendNode8 = (THtmlTagEnd)nodeArrayList6.get(0);
        tsemicolonNode9 = (TSemicolon)nodeArrayList7.get(0);

        phtmlNode1 = new AHtml(tconstNode2, thtmlNode3, tidentifierNode4, tassignNode5, thtmltagstartNode6, listNode7, thtmltagendNode8, tsemicolonNode9);
        }
	nodeList.add(phtmlNode1);
        return nodeList;
    }



    ArrayList new9() /* reduce AAhtml2Html */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PHtml phtmlNode1;
        {
        TConst tconstNode2;
        THtml thtmlNode3;
        TIdentifier tidentifierNode4;
        TAssign tassignNode5;
        THtmlTagStart thtmltagstartNode6;
        TypedLinkedList listNode8 = new TypedLinkedList();
        THtmlTagEnd thtmltagendNode9;
        TSemicolon tsemicolonNode10;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        thtmlNode3 = (THtml)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tassignNode5 = (TAssign)nodeArrayList4.get(0);
        thtmltagstartNode6 = (THtmlTagStart)nodeArrayList5.get(0);
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        thtmltagendNode9 = (THtmlTagEnd)nodeArrayList7.get(0);
        tsemicolonNode10 = (TSemicolon)nodeArrayList8.get(0);

        phtmlNode1 = new AHtml(tconstNode2, thtmlNode3, tidentifierNode4, tassignNode5, thtmltagstartNode6, listNode8, thtmltagendNode9, tsemicolonNode10);
        }
	nodeList.add(phtmlNode1);
        return nodeList;
    }



    ArrayList new10() /* reduce AAtagstarthtmlbody1Htmlbody */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PHtmlbody phtmlbodyNode1;
        {
        TLt tltNode2;
        TIdentifier tidentifierNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TGt tgtNode5;
        tltNode2 = (TLt)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
        }
        tgtNode5 = (TGt)nodeArrayList3.get(0);

        phtmlbodyNode1 = new ATagStartHtmlbody(tltNode2, tidentifierNode3, listNode4, tgtNode5);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    ArrayList new11() /* reduce AAtagstarthtmlbody2Htmlbody */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PHtmlbody phtmlbodyNode1;
        {
        TLt tltNode2;
        TIdentifier tidentifierNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TGt tgtNode6;
        tltNode2 = (TLt)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tgtNode6 = (TGt)nodeArrayList4.get(0);

        phtmlbodyNode1 = new ATagStartHtmlbody(tltNode2, tidentifierNode3, listNode5, tgtNode6);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    ArrayList new12() /* reduce ATagEndHtmlbody */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PHtmlbody phtmlbodyNode1;
        {
        TLtSlash tltslashNode2;
        TIdentifier tidentifierNode3;
        TGt tgtNode4;
        tltslashNode2 = (TLtSlash)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tgtNode4 = (TGt)nodeArrayList3.get(0);

        phtmlbodyNode1 = new ATagEndHtmlbody(tltslashNode2, tidentifierNode3, tgtNode4);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    ArrayList new13() /* reduce AHoleHtmlbody */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PHtmlbody phtmlbodyNode1;
        {
        TLtBracket tltbracketNode2;
        TIdentifier tidentifierNode3;
        TGtBracket tgtbracketNode4;
        tltbracketNode2 = (TLtBracket)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tgtbracketNode4 = (TGtBracket)nodeArrayList3.get(0);

        phtmlbodyNode1 = new AHoleHtmlbody(tltbracketNode2, tidentifierNode3, tgtbracketNode4);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    ArrayList new14() /* reduce AWhateverHtmlbody */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PHtmlbody phtmlbodyNode1;
        {
        TWhatever twhateverNode2;
        twhateverNode2 = (TWhatever)nodeArrayList1.get(0);

        phtmlbodyNode1 = new AWhateverHtmlbody(twhateverNode2);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    ArrayList new15() /* reduce AMetaHtmlbody */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PHtmlbody phtmlbodyNode1;
        {
        TMeta tmetaNode2;
        tmetaNode2 = (TMeta)nodeArrayList1.get(0);

        phtmlbodyNode1 = new AMetaHtmlbody(tmetaNode2);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    ArrayList new16() /* reduce AInputHtmlbody */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PHtmlbody phtmlbodyNode1;
        {
        TLt tltNode2;
        TInput tinputNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TGt tgtNode6;
        tltNode2 = (TLt)nodeArrayList1.get(0);
        tinputNode3 = (TInput)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tgtNode6 = (TGt)nodeArrayList4.get(0);

        phtmlbodyNode1 = new AInputHtmlbody(tltNode2, tinputNode3, listNode5, tgtNode6);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    ArrayList new17() /* reduce AAselecthtmlbody1Htmlbody */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PHtmlbody phtmlbodyNode1;
        {
        TLt tltNode2;
        TSelect tselectNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TGt tgtNode6;
        TypedLinkedList listNode7 = new TypedLinkedList();
        TLtSlash tltslashNode8;
        TSelect tselectNode9;
        TGt tgtNode10;
        tltNode2 = (TLt)nodeArrayList1.get(0);
        tselectNode3 = (TSelect)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tgtNode6 = (TGt)nodeArrayList4.get(0);
        {
        }
        tltslashNode8 = (TLtSlash)nodeArrayList5.get(0);
        tselectNode9 = (TSelect)nodeArrayList6.get(0);
        tgtNode10 = (TGt)nodeArrayList7.get(0);

        phtmlbodyNode1 = new ASelectHtmlbody(tltNode2, tselectNode3, listNode5, tgtNode6, listNode7, tltslashNode8, tselectNode9, tgtNode10);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    ArrayList new18() /* reduce AAselecthtmlbody2Htmlbody */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PHtmlbody phtmlbodyNode1;
        {
        TLt tltNode2;
        TSelect tselectNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TGt tgtNode6;
        TypedLinkedList listNode8 = new TypedLinkedList();
        TLtSlash tltslashNode9;
        TSelect tselectNode10;
        TGt tgtNode11;
        tltNode2 = (TLt)nodeArrayList1.get(0);
        tselectNode3 = (TSelect)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tgtNode6 = (TGt)nodeArrayList4.get(0);
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tltslashNode9 = (TLtSlash)nodeArrayList6.get(0);
        tselectNode10 = (TSelect)nodeArrayList7.get(0);
        tgtNode11 = (TGt)nodeArrayList8.get(0);

        phtmlbodyNode1 = new ASelectHtmlbody(tltNode2, tselectNode3, listNode5, tgtNode6, listNode8, tltslashNode9, tselectNode10, tgtNode11);
        }
	nodeList.add(phtmlbodyNode1);
        return nodeList;
    }



    ArrayList new19() /* reduce ANameInputattr */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PInputattr pinputattrNode1;
        {
        TName tnameNode2;
        TAssign tassignNode3;
        PAttr pattrNode4;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pattrNode4 = (PAttr)nodeArrayList3.get(0);

        pinputattrNode1 = new ANameInputattr(tnameNode2, tassignNode3, pattrNode4);
        }
	nodeList.add(pinputattrNode1);
        return nodeList;
    }



    ArrayList new20() /* reduce ATypeInputattr */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PInputattr pinputattrNode1;
        {
        TType ttypeNode2;
        TAssign tassignNode3;
        PInputtype pinputtypeNode4;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pinputtypeNode4 = (PInputtype)nodeArrayList3.get(0);

        pinputattrNode1 = new ATypeInputattr(ttypeNode2, tassignNode3, pinputtypeNode4);
        }
	nodeList.add(pinputattrNode1);
        return nodeList;
    }



    ArrayList new21() /* reduce AAttributeInputattr */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PInputattr pinputattrNode1;
        {
        PAttribute pattributeNode2;
        pattributeNode2 = (PAttribute)nodeArrayList1.get(0);

        pinputattrNode1 = new AAttributeInputattr(pattributeNode2);
        }
	nodeList.add(pinputattrNode1);
        return nodeList;
    }



    ArrayList new22() /* reduce ATextInputtype */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PInputtype pinputtypeNode1;
        {
        TText ttextNode2;
        ttextNode2 = (TText)nodeArrayList1.get(0);

        pinputtypeNode1 = new ATextInputtype(ttextNode2);
        }
	nodeList.add(pinputtypeNode1);
        return nodeList;
    }



    ArrayList new23() /* reduce ARadioInputtype */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PInputtype pinputtypeNode1;
        {
        TRadio tradioNode2;
        tradioNode2 = (TRadio)nodeArrayList1.get(0);

        pinputtypeNode1 = new ARadioInputtype(tradioNode2);
        }
	nodeList.add(pinputtypeNode1);
        return nodeList;
    }



    ArrayList new24() /* reduce AAttrAttribute */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAttribute pattributeNode1;
        {
        PAttr pattrNode2;
        pattrNode2 = (PAttr)nodeArrayList1.get(0);

        pattributeNode1 = new AAttrAttribute(pattrNode2);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    ArrayList new25() /* reduce AAssignAttribute */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAttribute pattributeNode1;
        {
        PAttr pattrNode2;
        TAssign tassignNode3;
        PAttr pattrNode4;
        pattrNode2 = (PAttr)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pattrNode4 = (PAttr)nodeArrayList3.get(0);

        pattributeNode1 = new AAssignAttribute(pattrNode2, tassignNode3, pattrNode4);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    ArrayList new26() /* reduce AIdAttr */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAttr pattrNode1;
        {
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pattrNode1 = new AIdAttr(tidentifierNode2);
        }
	nodeList.add(pattrNode1);
        return nodeList;
    }



    ArrayList new27() /* reduce AIntAttr */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAttr pattrNode1;
        {
        TIntconst tintconstNode2;
        tintconstNode2 = (TIntconst)nodeArrayList1.get(0);

        pattrNode1 = new AIntAttr(tintconstNode2);
        }
	nodeList.add(pattrNode1);
        return nodeList;
    }



    ArrayList new28() /* reduce AStrAttr */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAttr pattrNode1;
        {
        TStringconst tstringconstNode2;
        tstringconstNode2 = (TStringconst)nodeArrayList1.get(0);

        pattrNode1 = new AStrAttr(tstringconstNode2);
        }
	nodeList.add(pattrNode1);
        return nodeList;
    }



    ArrayList new29() /* reduce AAschema1Schema */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSchema pschemaNode1;
        {
        TSchema tschemaNode2;
        TIdentifier tidentifierNode3;
        TLBrace tlbraceNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TRBrace trbraceNode6;
        tschemaNode2 = (TSchema)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
        }
        trbraceNode6 = (TRBrace)nodeArrayList4.get(0);

        pschemaNode1 = new ASchema(tschemaNode2, tidentifierNode3, tlbraceNode4, listNode5, trbraceNode6);
        }
	nodeList.add(pschemaNode1);
        return nodeList;
    }



    ArrayList new30() /* reduce AAschema2Schema */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSchema pschemaNode1;
        {
        TSchema tschemaNode2;
        TIdentifier tidentifierNode3;
        TLBrace tlbraceNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TRBrace trbraceNode7;
        tschemaNode2 = (TSchema)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trbraceNode7 = (TRBrace)nodeArrayList5.get(0);

        pschemaNode1 = new ASchema(tschemaNode2, tidentifierNode3, tlbraceNode4, listNode6, trbraceNode7);
        }
	nodeList.add(pschemaNode1);
        return nodeList;
    }



    ArrayList new31() /* reduce AField */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PField pfieldNode1;
        {
        PSimpletype psimpletypeNode2;
        TIdentifier tidentifierNode3;
        TSemicolon tsemicolonNode4;
        psimpletypeNode2 = (PSimpletype)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pfieldNode1 = new AField(psimpletypeNode2, tidentifierNode3, tsemicolonNode4);
        }
	nodeList.add(pfieldNode1);
        return nodeList;
    }



    ArrayList new32() /* reduce AVariable */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PVariable pvariableNode1;
        {
        PType ptypeNode2;
        PIdentifiers pidentifiersNode3;
        TSemicolon tsemicolonNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        pidentifiersNode3 = (PIdentifiers)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pvariableNode1 = new AVariable(ptypeNode2, pidentifiersNode3, tsemicolonNode4);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    ArrayList new33() /* reduce AOneIdentifiers */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PIdentifiers pidentifiersNode1;
        {
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pidentifiersNode1 = new AOneIdentifiers(tidentifierNode2);
        }
	nodeList.add(pidentifiersNode1);
        return nodeList;
    }



    ArrayList new34() /* reduce AManyIdentifiers */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PIdentifiers pidentifiersNode1;
        {
        PIdentifiers pidentifiersNode2;
        TComma tcommaNode3;
        TIdentifier tidentifierNode4;
        pidentifiersNode2 = (PIdentifiers)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        pidentifiersNode1 = new AManyIdentifiers(pidentifiersNode2, tcommaNode3, tidentifierNode4);
        }
	nodeList.add(pidentifiersNode1);
        return nodeList;
    }



    ArrayList new35() /* reduce AIntSimpletype */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSimpletype psimpletypeNode1;
        {
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        psimpletypeNode1 = new AIntSimpletype(tintNode2);
        }
	nodeList.add(psimpletypeNode1);
        return nodeList;
    }



    ArrayList new36() /* reduce ABoolSimpletype */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSimpletype psimpletypeNode1;
        {
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        psimpletypeNode1 = new ABoolSimpletype(tboolNode2);
        }
	nodeList.add(psimpletypeNode1);
        return nodeList;
    }



    ArrayList new37() /* reduce AStringSimpletype */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSimpletype psimpletypeNode1;
        {
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        psimpletypeNode1 = new AStringSimpletype(tstringNode2);
        }
	nodeList.add(psimpletypeNode1);
        return nodeList;
    }



    ArrayList new38() /* reduce AVoidSimpletype */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSimpletype psimpletypeNode1;
        {
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        psimpletypeNode1 = new AVoidSimpletype(tvoidNode2);
        }
	nodeList.add(psimpletypeNode1);
        return nodeList;
    }



    ArrayList new39() /* reduce ASimpleType */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PType ptypeNode1;
        {
        PSimpletype psimpletypeNode2;
        psimpletypeNode2 = (PSimpletype)nodeArrayList1.get(0);

        ptypeNode1 = new ASimpleType(psimpletypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    ArrayList new40() /* reduce ATupleType */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PType ptypeNode1;
        {
        TTuple ttupleNode2;
        TIdentifier tidentifierNode3;
        ttupleNode2 = (TTuple)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        ptypeNode1 = new ATupleType(ttupleNode2, tidentifierNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    ArrayList new41() /* reduce AAfunction1Function */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        Object nullNode5 = null;
        TRPar trparNode6;
        PCompoundstm pcompoundstmNode7;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        pcompoundstmNode7 = (PCompoundstm)nodeArrayList5.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifierNode3, tlparNode4, null, trparNode6, pcompoundstmNode7);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new42() /* reduce AAfunction2Function */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        PArguments pargumentsNode5;
        TRPar trparNode6;
        PCompoundstm pcompoundstmNode7;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pargumentsNode5 = (PArguments)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        pcompoundstmNode7 = (PCompoundstm)nodeArrayList6.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifierNode3, tlparNode4, pargumentsNode5, trparNode6, pcompoundstmNode7);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new43() /* reduce AOneArguments */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArguments pargumentsNode1;
        {
        PArgument pargumentNode2;
        pargumentNode2 = (PArgument)nodeArrayList1.get(0);

        pargumentsNode1 = new AOneArguments(pargumentNode2);
        }
	nodeList.add(pargumentsNode1);
        return nodeList;
    }



    ArrayList new44() /* reduce AManyArguments */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArguments pargumentsNode1;
        {
        PArguments pargumentsNode2;
        TComma tcommaNode3;
        PArgument pargumentNode4;
        pargumentsNode2 = (PArguments)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pargumentNode4 = (PArgument)nodeArrayList3.get(0);

        pargumentsNode1 = new AManyArguments(pargumentsNode2, tcommaNode3, pargumentNode4);
        }
	nodeList.add(pargumentsNode1);
        return nodeList;
    }



    ArrayList new45() /* reduce AArgument */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pargumentNode1 = new AArgument(ptypeNode2, tidentifierNode3);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new46() /* reduce ASession */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSession psessionNode1;
        {
        TSession tsessionNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        TRPar trparNode5;
        PCompoundstm pcompoundstmNode6;
        tsessionNode2 = (TSession)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pcompoundstmNode6 = (PCompoundstm)nodeArrayList5.get(0);

        psessionNode1 = new ASession(tsessionNode2, tidentifierNode3, tlparNode4, trparNode5, pcompoundstmNode6);
        }
	nodeList.add(psessionNode1);
        return nodeList;
    }



    ArrayList new47() /* reduce ANoStm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pstmNode1 = new ANoStm(tsemicolonNode2);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new48() /* reduce AAshowstm1Stm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        TShow tshowNode2;
        PDocument pdocumentNode3;
        Object nullNode4 = null;
        TSemicolon tsemicolonNode5;
        tshowNode2 = (TShow)nodeArrayList1.get(0);
        pdocumentNode3 = (PDocument)nodeArrayList2.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList3.get(0);

        pstmNode1 = new AShowStm(tshowNode2, pdocumentNode3, null, tsemicolonNode5);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new49() /* reduce AAshowstm2Stm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        TShow tshowNode2;
        PDocument pdocumentNode3;
        PReceive preceiveNode4;
        TSemicolon tsemicolonNode5;
        tshowNode2 = (TShow)nodeArrayList1.get(0);
        pdocumentNode3 = (PDocument)nodeArrayList2.get(0);
        preceiveNode4 = (PReceive)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pstmNode1 = new AShowStm(tshowNode2, pdocumentNode3, preceiveNode4, tsemicolonNode5);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new50() /* reduce AExitStm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        TExit texitNode2;
        PDocument pdocumentNode3;
        TSemicolon tsemicolonNode4;
        texitNode2 = (TExit)nodeArrayList1.get(0);
        pdocumentNode3 = (PDocument)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pstmNode1 = new AExitStm(texitNode2, pdocumentNode3, tsemicolonNode4);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new51() /* reduce AReturnStm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pstmNode1 = new AReturnStm(treturnNode2, tsemicolonNode3);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new52() /* reduce ARetexpStm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        TReturn treturnNode2;
        PExp pexpNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pstmNode1 = new ARetexpStm(treturnNode2, pexpNode3, tsemicolonNode4);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new53() /* reduce AIfStm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        TIf tifNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        PStm pstmNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pstmNode6 = (PStm)nodeArrayList5.get(0);

        pstmNode1 = new AIfStm(tifNode2, tlparNode3, pexpNode4, trparNode5, pstmNode6);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new54() /* reduce AIfelseStm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        TIf tifNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        PStmNoShortIf pstmnoshortifNode6;
        TElse telseNode7;
        PStm pstmNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pstmnoshortifNode6 = (PStmNoShortIf)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pstmNode8 = (PStm)nodeArrayList7.get(0);

        pstmNode1 = new AIfelseStm(tifNode2, tlparNode3, pexpNode4, trparNode5, pstmnoshortifNode6, telseNode7, pstmNode8);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new55() /* reduce AWhileStm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        PStm pstmNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pstmNode6 = (PStm)nodeArrayList5.get(0);

        pstmNode1 = new AWhileStm(twhileNode2, tlparNode3, pexpNode4, trparNode5, pstmNode6);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new56() /* reduce ACompStm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        PCompoundstm pcompoundstmNode2;
        pcompoundstmNode2 = (PCompoundstm)nodeArrayList1.get(0);

        pstmNode1 = new ACompStm(pcompoundstmNode2);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new57() /* reduce AExpStm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        PExp pexpNode2;
        TSemicolon tsemicolonNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pstmNode1 = new AExpStm(pexpNode2, tsemicolonNode3);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new58() /* reduce ANoStmNoShortIf */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStmNoShortIf pstmnoshortifNode1;
        {
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pstmnoshortifNode1 = new ANoStmNoShortIf(tsemicolonNode2);
        }
	nodeList.add(pstmnoshortifNode1);
        return nodeList;
    }



    ArrayList new59() /* reduce AAshowstmnoshortif1StmNoShortIf */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStmNoShortIf pstmnoshortifNode1;
        {
        TShow tshowNode2;
        PDocument pdocumentNode3;
        Object nullNode4 = null;
        TSemicolon tsemicolonNode5;
        tshowNode2 = (TShow)nodeArrayList1.get(0);
        pdocumentNode3 = (PDocument)nodeArrayList2.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList3.get(0);

        pstmnoshortifNode1 = new AShowStmNoShortIf(tshowNode2, pdocumentNode3, null, tsemicolonNode5);
        }
	nodeList.add(pstmnoshortifNode1);
        return nodeList;
    }



    ArrayList new60() /* reduce AAshowstmnoshortif2StmNoShortIf */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStmNoShortIf pstmnoshortifNode1;
        {
        TShow tshowNode2;
        PDocument pdocumentNode3;
        PReceive preceiveNode4;
        TSemicolon tsemicolonNode5;
        tshowNode2 = (TShow)nodeArrayList1.get(0);
        pdocumentNode3 = (PDocument)nodeArrayList2.get(0);
        preceiveNode4 = (PReceive)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pstmnoshortifNode1 = new AShowStmNoShortIf(tshowNode2, pdocumentNode3, preceiveNode4, tsemicolonNode5);
        }
	nodeList.add(pstmnoshortifNode1);
        return nodeList;
    }



    ArrayList new61() /* reduce AExitStmNoShortIf */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStmNoShortIf pstmnoshortifNode1;
        {
        TExit texitNode2;
        PDocument pdocumentNode3;
        TSemicolon tsemicolonNode4;
        texitNode2 = (TExit)nodeArrayList1.get(0);
        pdocumentNode3 = (PDocument)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pstmnoshortifNode1 = new AExitStmNoShortIf(texitNode2, pdocumentNode3, tsemicolonNode4);
        }
	nodeList.add(pstmnoshortifNode1);
        return nodeList;
    }



    ArrayList new62() /* reduce AReturnStmNoShortIf */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStmNoShortIf pstmnoshortifNode1;
        {
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pstmnoshortifNode1 = new AReturnStmNoShortIf(treturnNode2, tsemicolonNode3);
        }
	nodeList.add(pstmnoshortifNode1);
        return nodeList;
    }



    ArrayList new63() /* reduce ARetexpStmNoShortIf */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStmNoShortIf pstmnoshortifNode1;
        {
        TReturn treturnNode2;
        PExp pexpNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pstmnoshortifNode1 = new ARetexpStmNoShortIf(treturnNode2, pexpNode3, tsemicolonNode4);
        }
	nodeList.add(pstmnoshortifNode1);
        return nodeList;
    }



    ArrayList new64() /* reduce AIfelseStmNoShortIf */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStmNoShortIf pstmnoshortifNode1;
        {
        TIf tifNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        PStmNoShortIf pstmnoshortifNode6;
        TElse telseNode7;
        PStmNoShortIf pstmnoshortifNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pstmnoshortifNode6 = (PStmNoShortIf)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pstmnoshortifNode8 = (PStmNoShortIf)nodeArrayList7.get(0);

        pstmnoshortifNode1 = new AIfelseStmNoShortIf(tifNode2, tlparNode3, pexpNode4, trparNode5, pstmnoshortifNode6, telseNode7, pstmnoshortifNode8);
        }
	nodeList.add(pstmnoshortifNode1);
        return nodeList;
    }



    ArrayList new65() /* reduce AWhileStmNoShortIf */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStmNoShortIf pstmnoshortifNode1;
        {
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        PStmNoShortIf pstmnoshortifNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pstmnoshortifNode6 = (PStmNoShortIf)nodeArrayList5.get(0);

        pstmnoshortifNode1 = new AWhileStmNoShortIf(twhileNode2, tlparNode3, pexpNode4, trparNode5, pstmnoshortifNode6);
        }
	nodeList.add(pstmnoshortifNode1);
        return nodeList;
    }



    ArrayList new66() /* reduce ACompStmNoShortIf */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStmNoShortIf pstmnoshortifNode1;
        {
        PCompoundstm pcompoundstmNode2;
        pcompoundstmNode2 = (PCompoundstm)nodeArrayList1.get(0);

        pstmnoshortifNode1 = new ACompStmNoShortIf(pcompoundstmNode2);
        }
	nodeList.add(pstmnoshortifNode1);
        return nodeList;
    }



    ArrayList new67() /* reduce AExpStmNoShortIf */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStmNoShortIf pstmnoshortifNode1;
        {
        PExp pexpNode2;
        TSemicolon tsemicolonNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pstmnoshortifNode1 = new AExpStmNoShortIf(pexpNode2, tsemicolonNode3);
        }
	nodeList.add(pstmnoshortifNode1);
        return nodeList;
    }



    ArrayList new68() /* reduce AIdDocument */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PDocument pdocumentNode1;
        {
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pdocumentNode1 = new AIdDocument(tidentifierNode2);
        }
	nodeList.add(pdocumentNode1);
        return nodeList;
    }



    ArrayList new69() /* reduce APlugDocument */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PDocument pdocumentNode1;
        {
        TPlug tplugNode2;
        TIdentifier tidentifierNode3;
        TLBracket tlbracketNode4;
        PPlugs pplugsNode5;
        TRBracket trbracketNode6;
        tplugNode2 = (TPlug)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlbracketNode4 = (TLBracket)nodeArrayList3.get(0);
        pplugsNode5 = (PPlugs)nodeArrayList4.get(0);
        trbracketNode6 = (TRBracket)nodeArrayList5.get(0);

        pdocumentNode1 = new APlugDocument(tplugNode2, tidentifierNode3, tlbracketNode4, pplugsNode5, trbracketNode6);
        }
	nodeList.add(pdocumentNode1);
        return nodeList;
    }



    ArrayList new70() /* reduce AReceive */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PReceive preceiveNode1;
        {
        TReceive treceiveNode2;
        TLBracket tlbracketNode3;
        PInputs pinputsNode4;
        TRBracket trbracketNode5;
        treceiveNode2 = (TReceive)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pinputsNode4 = (PInputs)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);

        preceiveNode1 = new AReceive(treceiveNode2, tlbracketNode3, pinputsNode4, trbracketNode5);
        }
	nodeList.add(preceiveNode1);
        return nodeList;
    }



    ArrayList new71() /* reduce AAcompoundstm1Compoundstm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCompoundstm pcompoundstmNode1;
        {
        TLBrace tlbraceNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        TypedLinkedList listNode4 = new TypedLinkedList();
        TRBrace trbraceNode5;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
        }
        {
        }
        trbraceNode5 = (TRBrace)nodeArrayList2.get(0);

        pcompoundstmNode1 = new ACompoundstm(tlbraceNode2, listNode3, listNode4, trbraceNode5);
        }
	nodeList.add(pcompoundstmNode1);
        return nodeList;
    }



    ArrayList new72() /* reduce AAcompoundstm2Compoundstm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCompoundstm pcompoundstmNode1;
        {
        TLBrace tlbraceNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode5 = new TypedLinkedList();
        TRBrace trbraceNode6;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
        }
        trbraceNode6 = (TRBrace)nodeArrayList3.get(0);

        pcompoundstmNode1 = new ACompoundstm(tlbraceNode2, listNode4, listNode5, trbraceNode6);
        }
	nodeList.add(pcompoundstmNode1);
        return nodeList;
    }



    ArrayList new73() /* reduce AAcompoundstm3Compoundstm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCompoundstm pcompoundstmNode1;
        {
        TLBrace tlbraceNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        TypedLinkedList listNode5 = new TypedLinkedList();
        TRBrace trbraceNode6;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
        }
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbraceNode6 = (TRBrace)nodeArrayList3.get(0);

        pcompoundstmNode1 = new ACompoundstm(tlbraceNode2, listNode3, listNode5, trbraceNode6);
        }
	nodeList.add(pcompoundstmNode1);
        return nodeList;
    }



    ArrayList new74() /* reduce AAcompoundstm4Compoundstm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCompoundstm pcompoundstmNode1;
        {
        TLBrace tlbraceNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        TRBrace trbraceNode7;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trbraceNode7 = (TRBrace)nodeArrayList4.get(0);

        pcompoundstmNode1 = new ACompoundstm(tlbraceNode2, listNode4, listNode6, trbraceNode7);
        }
	nodeList.add(pcompoundstmNode1);
        return nodeList;
    }



    ArrayList new75() /* reduce AOnePlugs */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPlugs pplugsNode1;
        {
        PPlug pplugNode2;
        pplugNode2 = (PPlug)nodeArrayList1.get(0);

        pplugsNode1 = new AOnePlugs(pplugNode2);
        }
	nodeList.add(pplugsNode1);
        return nodeList;
    }



    ArrayList new76() /* reduce AManyPlugs */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPlugs pplugsNode1;
        {
        PPlugs pplugsNode2;
        TComma tcommaNode3;
        PPlug pplugNode4;
        pplugsNode2 = (PPlugs)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pplugNode4 = (PPlug)nodeArrayList3.get(0);

        pplugsNode1 = new AManyPlugs(pplugsNode2, tcommaNode3, pplugNode4);
        }
	nodeList.add(pplugsNode1);
        return nodeList;
    }



    ArrayList new77() /* reduce APlug */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPlug pplugNode1;
        {
        TIdentifier tidentifierNode2;
        TAssign tassignNode3;
        PExp pexpNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pplugNode1 = new APlug(tidentifierNode2, tassignNode3, pexpNode4);
        }
	nodeList.add(pplugNode1);
        return nodeList;
    }



    ArrayList new78() /* reduce AOneInputs */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PInputs pinputsNode1;
        {
        PInput pinputNode2;
        pinputNode2 = (PInput)nodeArrayList1.get(0);

        pinputsNode1 = new AOneInputs(pinputNode2);
        }
	nodeList.add(pinputsNode1);
        return nodeList;
    }



    ArrayList new79() /* reduce AManyInputs */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PInputs pinputsNode1;
        {
        PInputs pinputsNode2;
        TComma tcommaNode3;
        PInput pinputNode4;
        pinputsNode2 = (PInputs)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pinputNode4 = (PInput)nodeArrayList3.get(0);

        pinputsNode1 = new AManyInputs(pinputsNode2, tcommaNode3, pinputNode4);
        }
	nodeList.add(pinputsNode1);
        return nodeList;
    }



    ArrayList new80() /* reduce AInput */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PInput pinputNode1;
        {
        PLvalue plvalueNode2;
        TAssign tassignNode3;
        TIdentifier tidentifierNode4;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        pinputNode1 = new AInput(plvalueNode2, tassignNode3, tidentifierNode4);
        }
	nodeList.add(pinputNode1);
        return nodeList;
    }



    ArrayList new81() /* reduce AAssignExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PLvalue plvalueNode2;
        TAssign tassignNode3;
        POrExp porexpNode4;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        porexpNode4 = (POrExp)nodeArrayList3.get(0);

        pexpNode1 = new AAssignExp(plvalueNode2, tassignNode3, porexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new82() /* reduce ADefaultExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        POrExp porexpNode2;
        porexpNode2 = (POrExp)nodeArrayList1.get(0);

        pexpNode1 = new ADefaultExp(porexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new83() /* reduce AOrOrExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        POrExp porexpNode1;
        {
        POrExp porexpNode2;
        TOr torNode3;
        PAndExp pandexpNode4;
        porexpNode2 = (POrExp)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pandexpNode4 = (PAndExp)nodeArrayList3.get(0);

        porexpNode1 = new AOrOrExp(porexpNode2, torNode3, pandexpNode4);
        }
	nodeList.add(porexpNode1);
        return nodeList;
    }



    ArrayList new84() /* reduce ADefaultOrExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        POrExp porexpNode1;
        {
        PAndExp pandexpNode2;
        pandexpNode2 = (PAndExp)nodeArrayList1.get(0);

        porexpNode1 = new ADefaultOrExp(pandexpNode2);
        }
	nodeList.add(porexpNode1);
        return nodeList;
    }



    ArrayList new85() /* reduce AAndAndExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAndExp pandexpNode1;
        {
        PAndExp pandexpNode2;
        TAnd tandNode3;
        PCmpExp pcmpexpNode4;
        pandexpNode2 = (PAndExp)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pcmpexpNode4 = (PCmpExp)nodeArrayList3.get(0);

        pandexpNode1 = new AAndAndExp(pandexpNode2, tandNode3, pcmpexpNode4);
        }
	nodeList.add(pandexpNode1);
        return nodeList;
    }



    ArrayList new86() /* reduce ADefaultAndExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAndExp pandexpNode1;
        {
        PCmpExp pcmpexpNode2;
        pcmpexpNode2 = (PCmpExp)nodeArrayList1.get(0);

        pandexpNode1 = new ADefaultAndExp(pcmpexpNode2);
        }
	nodeList.add(pandexpNode1);
        return nodeList;
    }



    ArrayList new87() /* reduce AEqCmpExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCmpExp pcmpexpNode1;
        {
        PAddExp paddexpNode2;
        TEq teqNode3;
        PAddExp paddexpNode4;
        paddexpNode2 = (PAddExp)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        paddexpNode4 = (PAddExp)nodeArrayList3.get(0);

        pcmpexpNode1 = new AEqCmpExp(paddexpNode2, teqNode3, paddexpNode4);
        }
	nodeList.add(pcmpexpNode1);
        return nodeList;
    }



    ArrayList new88() /* reduce ANeqCmpExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCmpExp pcmpexpNode1;
        {
        PAddExp paddexpNode2;
        TNeq tneqNode3;
        PAddExp paddexpNode4;
        paddexpNode2 = (PAddExp)nodeArrayList1.get(0);
        tneqNode3 = (TNeq)nodeArrayList2.get(0);
        paddexpNode4 = (PAddExp)nodeArrayList3.get(0);

        pcmpexpNode1 = new ANeqCmpExp(paddexpNode2, tneqNode3, paddexpNode4);
        }
	nodeList.add(pcmpexpNode1);
        return nodeList;
    }



    ArrayList new89() /* reduce ALtCmpExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCmpExp pcmpexpNode1;
        {
        PAddExp paddexpNode2;
        TLt tltNode3;
        PAddExp paddexpNode4;
        paddexpNode2 = (PAddExp)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        paddexpNode4 = (PAddExp)nodeArrayList3.get(0);

        pcmpexpNode1 = new ALtCmpExp(paddexpNode2, tltNode3, paddexpNode4);
        }
	nodeList.add(pcmpexpNode1);
        return nodeList;
    }



    ArrayList new90() /* reduce AGtCmpExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCmpExp pcmpexpNode1;
        {
        PAddExp paddexpNode2;
        TGt tgtNode3;
        PAddExp paddexpNode4;
        paddexpNode2 = (PAddExp)nodeArrayList1.get(0);
        tgtNode3 = (TGt)nodeArrayList2.get(0);
        paddexpNode4 = (PAddExp)nodeArrayList3.get(0);

        pcmpexpNode1 = new AGtCmpExp(paddexpNode2, tgtNode3, paddexpNode4);
        }
	nodeList.add(pcmpexpNode1);
        return nodeList;
    }



    ArrayList new91() /* reduce ALteqCmpExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCmpExp pcmpexpNode1;
        {
        PAddExp paddexpNode2;
        TLteq tlteqNode3;
        PAddExp paddexpNode4;
        paddexpNode2 = (PAddExp)nodeArrayList1.get(0);
        tlteqNode3 = (TLteq)nodeArrayList2.get(0);
        paddexpNode4 = (PAddExp)nodeArrayList3.get(0);

        pcmpexpNode1 = new ALteqCmpExp(paddexpNode2, tlteqNode3, paddexpNode4);
        }
	nodeList.add(pcmpexpNode1);
        return nodeList;
    }



    ArrayList new92() /* reduce AGteqCmpExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCmpExp pcmpexpNode1;
        {
        PAddExp paddexpNode2;
        TGteq tgteqNode3;
        PAddExp paddexpNode4;
        paddexpNode2 = (PAddExp)nodeArrayList1.get(0);
        tgteqNode3 = (TGteq)nodeArrayList2.get(0);
        paddexpNode4 = (PAddExp)nodeArrayList3.get(0);

        pcmpexpNode1 = new AGteqCmpExp(paddexpNode2, tgteqNode3, paddexpNode4);
        }
	nodeList.add(pcmpexpNode1);
        return nodeList;
    }



    ArrayList new93() /* reduce ADefaultCmpExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCmpExp pcmpexpNode1;
        {
        PAddExp paddexpNode2;
        paddexpNode2 = (PAddExp)nodeArrayList1.get(0);

        pcmpexpNode1 = new ADefaultCmpExp(paddexpNode2);
        }
	nodeList.add(pcmpexpNode1);
        return nodeList;
    }



    ArrayList new94() /* reduce APlusAddExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAddExp paddexpNode1;
        {
        PAddExp paddexpNode2;
        TPlus tplusNode3;
        PMultExp pmultexpNode4;
        paddexpNode2 = (PAddExp)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pmultexpNode4 = (PMultExp)nodeArrayList3.get(0);

        paddexpNode1 = new APlusAddExp(paddexpNode2, tplusNode3, pmultexpNode4);
        }
	nodeList.add(paddexpNode1);
        return nodeList;
    }



    ArrayList new95() /* reduce AMinusAddExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAddExp paddexpNode1;
        {
        PAddExp paddexpNode2;
        TMinus tminusNode3;
        PMultExp pmultexpNode4;
        paddexpNode2 = (PAddExp)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pmultexpNode4 = (PMultExp)nodeArrayList3.get(0);

        paddexpNode1 = new AMinusAddExp(paddexpNode2, tminusNode3, pmultexpNode4);
        }
	nodeList.add(paddexpNode1);
        return nodeList;
    }



    ArrayList new96() /* reduce ADefaultAddExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAddExp paddexpNode1;
        {
        PMultExp pmultexpNode2;
        pmultexpNode2 = (PMultExp)nodeArrayList1.get(0);

        paddexpNode1 = new ADefaultAddExp(pmultexpNode2);
        }
	nodeList.add(paddexpNode1);
        return nodeList;
    }



    ArrayList new97() /* reduce AMultMultExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultExp pmultexpNode1;
        {
        PMultExp pmultexpNode2;
        TMult tmultNode3;
        PJoinExp pjoinexpNode4;
        pmultexpNode2 = (PMultExp)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pjoinexpNode4 = (PJoinExp)nodeArrayList3.get(0);

        pmultexpNode1 = new AMultMultExp(pmultexpNode2, tmultNode3, pjoinexpNode4);
        }
	nodeList.add(pmultexpNode1);
        return nodeList;
    }



    ArrayList new98() /* reduce ADivMultExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultExp pmultexpNode1;
        {
        PMultExp pmultexpNode2;
        TDiv tdivNode3;
        PJoinExp pjoinexpNode4;
        pmultexpNode2 = (PMultExp)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pjoinexpNode4 = (PJoinExp)nodeArrayList3.get(0);

        pmultexpNode1 = new ADivMultExp(pmultexpNode2, tdivNode3, pjoinexpNode4);
        }
	nodeList.add(pmultexpNode1);
        return nodeList;
    }



    ArrayList new99() /* reduce AModMultExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultExp pmultexpNode1;
        {
        PMultExp pmultexpNode2;
        TMod tmodNode3;
        PJoinExp pjoinexpNode4;
        pmultexpNode2 = (PMultExp)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        pjoinexpNode4 = (PJoinExp)nodeArrayList3.get(0);

        pmultexpNode1 = new AModMultExp(pmultexpNode2, tmodNode3, pjoinexpNode4);
        }
	nodeList.add(pmultexpNode1);
        return nodeList;
    }



    ArrayList new100() /* reduce ADefaultMultExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultExp pmultexpNode1;
        {
        PJoinExp pjoinexpNode2;
        pjoinexpNode2 = (PJoinExp)nodeArrayList1.get(0);

        pmultexpNode1 = new ADefaultMultExp(pjoinexpNode2);
        }
	nodeList.add(pmultexpNode1);
        return nodeList;
    }



    ArrayList new101() /* reduce AJoinJoinExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PJoinExp pjoinexpNode1;
        {
        PTupleExp ptupleexpNode2;
        TJoin tjoinNode3;
        PJoinExp pjoinexpNode4;
        ptupleexpNode2 = (PTupleExp)nodeArrayList1.get(0);
        tjoinNode3 = (TJoin)nodeArrayList2.get(0);
        pjoinexpNode4 = (PJoinExp)nodeArrayList3.get(0);

        pjoinexpNode1 = new AJoinJoinExp(ptupleexpNode2, tjoinNode3, pjoinexpNode4);
        }
	nodeList.add(pjoinexpNode1);
        return nodeList;
    }



    ArrayList new102() /* reduce ADefaultJoinExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PJoinExp pjoinexpNode1;
        {
        PTupleExp ptupleexpNode2;
        ptupleexpNode2 = (PTupleExp)nodeArrayList1.get(0);

        pjoinexpNode1 = new ADefaultJoinExp(ptupleexpNode2);
        }
	nodeList.add(pjoinexpNode1);
        return nodeList;
    }



    ArrayList new103() /* reduce AKeepTupleExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTupleExp ptupleexpNode1;
        {
        PTupleExp ptupleexpNode2;
        TKeep tkeepNode3;
        TIdentifier tidentifierNode4;
        ptupleexpNode2 = (PTupleExp)nodeArrayList1.get(0);
        tkeepNode3 = (TKeep)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        ptupleexpNode1 = new AKeepTupleExp(ptupleexpNode2, tkeepNode3, tidentifierNode4);
        }
	nodeList.add(ptupleexpNode1);
        return nodeList;
    }



    ArrayList new104() /* reduce ARemoveTupleExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTupleExp ptupleexpNode1;
        {
        PTupleExp ptupleexpNode2;
        TRemove tremoveNode3;
        TIdentifier tidentifierNode4;
        ptupleexpNode2 = (PTupleExp)nodeArrayList1.get(0);
        tremoveNode3 = (TRemove)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        ptupleexpNode1 = new ARemoveTupleExp(ptupleexpNode2, tremoveNode3, tidentifierNode4);
        }
	nodeList.add(ptupleexpNode1);
        return nodeList;
    }



    ArrayList new105() /* reduce AKeepManyTupleExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTupleExp ptupleexpNode1;
        {
        PTupleExp ptupleexpNode2;
        TKeep tkeepNode3;
        TLPar tlparNode4;
        PIdentifiers pidentifiersNode5;
        TRPar trparNode6;
        ptupleexpNode2 = (PTupleExp)nodeArrayList1.get(0);
        tkeepNode3 = (TKeep)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pidentifiersNode5 = (PIdentifiers)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        ptupleexpNode1 = new AKeepManyTupleExp(ptupleexpNode2, tkeepNode3, tlparNode4, pidentifiersNode5, trparNode6);
        }
	nodeList.add(ptupleexpNode1);
        return nodeList;
    }



    ArrayList new106() /* reduce ARemoveManyTupleExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTupleExp ptupleexpNode1;
        {
        PTupleExp ptupleexpNode2;
        TRemove tremoveNode3;
        TLPar tlparNode4;
        PIdentifiers pidentifiersNode5;
        TRPar trparNode6;
        ptupleexpNode2 = (PTupleExp)nodeArrayList1.get(0);
        tremoveNode3 = (TRemove)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pidentifiersNode5 = (PIdentifiers)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        ptupleexpNode1 = new ARemoveManyTupleExp(ptupleexpNode2, tremoveNode3, tlparNode4, pidentifiersNode5, trparNode6);
        }
	nodeList.add(ptupleexpNode1);
        return nodeList;
    }



    ArrayList new107() /* reduce ADefaultTupleExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTupleExp ptupleexpNode1;
        {
        PUnaryExp punaryexpNode2;
        punaryexpNode2 = (PUnaryExp)nodeArrayList1.get(0);

        ptupleexpNode1 = new ADefaultTupleExp(punaryexpNode2);
        }
	nodeList.add(ptupleexpNode1);
        return nodeList;
    }



    ArrayList new108() /* reduce ANotUnaryExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PUnaryExp punaryexpNode1;
        {
        TNot tnotNode2;
        PBaseExp pbaseexpNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pbaseexpNode3 = (PBaseExp)nodeArrayList2.get(0);

        punaryexpNode1 = new ANotUnaryExp(tnotNode2, pbaseexpNode3);
        }
	nodeList.add(punaryexpNode1);
        return nodeList;
    }



    ArrayList new109() /* reduce ANegUnaryExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PUnaryExp punaryexpNode1;
        {
        TMinus tminusNode2;
        PBaseExp pbaseexpNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pbaseexpNode3 = (PBaseExp)nodeArrayList2.get(0);

        punaryexpNode1 = new ANegUnaryExp(tminusNode2, pbaseexpNode3);
        }
	nodeList.add(punaryexpNode1);
        return nodeList;
    }



    ArrayList new110() /* reduce ADefaultUnaryExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PUnaryExp punaryexpNode1;
        {
        PBaseExp pbaseexpNode2;
        pbaseexpNode2 = (PBaseExp)nodeArrayList1.get(0);

        punaryexpNode1 = new ADefaultUnaryExp(pbaseexpNode2);
        }
	nodeList.add(punaryexpNode1);
        return nodeList;
    }



    ArrayList new111() /* reduce ALvalueBaseExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PBaseExp pbaseexpNode1;
        {
        PLvalue plvalueNode2;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);

        pbaseexpNode1 = new ALvalueBaseExp(plvalueNode2);
        }
	nodeList.add(pbaseexpNode1);
        return nodeList;
    }



    ArrayList new112() /* reduce AAcallbaseexp1BaseExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PBaseExp pbaseexpNode1;
        {
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        Object nullNode4 = null;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pbaseexpNode1 = new ACallBaseExp(tidentifierNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pbaseexpNode1);
        return nodeList;
    }



    ArrayList new113() /* reduce AAcallbaseexp2BaseExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PBaseExp pbaseexpNode1;
        {
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        PExps pexpsNode4;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpsNode4 = (PExps)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pbaseexpNode1 = new ACallBaseExp(tidentifierNode2, tlparNode3, pexpsNode4, trparNode5);
        }
	nodeList.add(pbaseexpNode1);
        return nodeList;
    }



    ArrayList new114() /* reduce AIntBaseExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PBaseExp pbaseexpNode1;
        {
        TIntconst tintconstNode2;
        tintconstNode2 = (TIntconst)nodeArrayList1.get(0);

        pbaseexpNode1 = new AIntBaseExp(tintconstNode2);
        }
	nodeList.add(pbaseexpNode1);
        return nodeList;
    }



    ArrayList new115() /* reduce ATrueBaseExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PBaseExp pbaseexpNode1;
        {
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pbaseexpNode1 = new ATrueBaseExp(ttrueNode2);
        }
	nodeList.add(pbaseexpNode1);
        return nodeList;
    }



    ArrayList new116() /* reduce AFalseBaseExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PBaseExp pbaseexpNode1;
        {
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pbaseexpNode1 = new AFalseBaseExp(tfalseNode2);
        }
	nodeList.add(pbaseexpNode1);
        return nodeList;
    }



    ArrayList new117() /* reduce AStringBaseExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PBaseExp pbaseexpNode1;
        {
        TStringconst tstringconstNode2;
        tstringconstNode2 = (TStringconst)nodeArrayList1.get(0);

        pbaseexpNode1 = new AStringBaseExp(tstringconstNode2);
        }
	nodeList.add(pbaseexpNode1);
        return nodeList;
    }



    ArrayList new118() /* reduce AAtuplebaseexp1BaseExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PBaseExp pbaseexpNode1;
        {
        TTuple ttupleNode2;
        TLBrace tlbraceNode3;
        Object nullNode4 = null;
        TRBrace trbraceNode5;
        ttupleNode2 = (TTuple)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList3.get(0);

        pbaseexpNode1 = new ATupleBaseExp(ttupleNode2, tlbraceNode3, null, trbraceNode5);
        }
	nodeList.add(pbaseexpNode1);
        return nodeList;
    }



    ArrayList new119() /* reduce AAtuplebaseexp2BaseExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PBaseExp pbaseexpNode1;
        {
        TTuple ttupleNode2;
        TLBrace tlbraceNode3;
        PFieldvalues pfieldvaluesNode4;
        TRBrace trbraceNode5;
        ttupleNode2 = (TTuple)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        pfieldvaluesNode4 = (PFieldvalues)nodeArrayList3.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList4.get(0);

        pbaseexpNode1 = new ATupleBaseExp(ttupleNode2, tlbraceNode3, pfieldvaluesNode4, trbraceNode5);
        }
	nodeList.add(pbaseexpNode1);
        return nodeList;
    }



    ArrayList new120() /* reduce AParenBaseExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PBaseExp pbaseexpNode1;
        {
        TLPar tlparNode2;
        PExp pexpNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pbaseexpNode1 = new AParenBaseExp(tlparNode2, pexpNode3, trparNode4);
        }
	nodeList.add(pbaseexpNode1);
        return nodeList;
    }



    ArrayList new121() /* reduce AOneExps */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExps pexpsNode1;
        {
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pexpsNode1 = new AOneExps(pexpNode2);
        }
	nodeList.add(pexpsNode1);
        return nodeList;
    }



    ArrayList new122() /* reduce AManyExps */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExps pexpsNode1;
        {
        PExps pexpsNode2;
        TComma tcommaNode3;
        PExp pexpNode4;
        pexpsNode2 = (PExps)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpsNode1 = new AManyExps(pexpsNode2, tcommaNode3, pexpNode4);
        }
	nodeList.add(pexpsNode1);
        return nodeList;
    }



    ArrayList new123() /* reduce ASimpleLvalue */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PLvalue plvalueNode1;
        {
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        plvalueNode1 = new ASimpleLvalue(tidentifierNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    ArrayList new124() /* reduce AQualifiedLvalue */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PLvalue plvalueNode1;
        {
        TIdentifier tidentifierNode2;
        TDot tdotNode3;
        TIdentifier tidentifierNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        plvalueNode1 = new AQualifiedLvalue(tidentifierNode2, tdotNode3, tidentifierNode4);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    ArrayList new125() /* reduce AOneFieldvalues */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFieldvalues pfieldvaluesNode1;
        {
        PFieldvalue pfieldvalueNode2;
        pfieldvalueNode2 = (PFieldvalue)nodeArrayList1.get(0);

        pfieldvaluesNode1 = new AOneFieldvalues(pfieldvalueNode2);
        }
	nodeList.add(pfieldvaluesNode1);
        return nodeList;
    }



    ArrayList new126() /* reduce AManyFieldvalues */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFieldvalues pfieldvaluesNode1;
        {
        PFieldvalues pfieldvaluesNode2;
        TComma tcommaNode3;
        PFieldvalue pfieldvalueNode4;
        pfieldvaluesNode2 = (PFieldvalues)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pfieldvalueNode4 = (PFieldvalue)nodeArrayList3.get(0);

        pfieldvaluesNode1 = new AManyFieldvalues(pfieldvaluesNode2, tcommaNode3, pfieldvalueNode4);
        }
	nodeList.add(pfieldvaluesNode1);
        return nodeList;
    }



    ArrayList new127() /* reduce AFieldvalue */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFieldvalue pfieldvalueNode1;
        {
        TIdentifier tidentifierNode2;
        TAssign tassignNode3;
        PExp pexpNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pfieldvalueNode1 = new AFieldvalue(tidentifierNode2, tassignNode3, pexpNode4);
        }
	nodeList.add(pfieldvalueNode1);
        return nodeList;
    }



    ArrayList new128() /* reduce ATerminal$Html */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PHtml phtmlNode1;
        phtmlNode1 = (PHtml)nodeArrayList1.get(0);
	if(phtmlNode1 != null)
	{
	  listNode2.add(phtmlNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new129() /* reduce ANonTerminal$Html */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PHtml phtmlNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        phtmlNode2 = (PHtml)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(phtmlNode2 != null)
	{
	  listNode3.add(phtmlNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new130() /* reduce ATerminal$Session */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PSession psessionNode1;
        psessionNode1 = (PSession)nodeArrayList1.get(0);
	if(psessionNode1 != null)
	{
	  listNode2.add(psessionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new131() /* reduce ANonTerminal$Session */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PSession psessionNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        psessionNode2 = (PSession)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psessionNode2 != null)
	{
	  listNode3.add(psessionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new132() /* reduce ATerminal$Schema */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PSchema pschemaNode1;
        pschemaNode1 = (PSchema)nodeArrayList1.get(0);
	if(pschemaNode1 != null)
	{
	  listNode2.add(pschemaNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new133() /* reduce ANonTerminal$Schema */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PSchema pschemaNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pschemaNode2 = (PSchema)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pschemaNode2 != null)
	{
	  listNode3.add(pschemaNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new134() /* reduce ATerminal$Variable */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PVariable pvariableNode1;
        pvariableNode1 = (PVariable)nodeArrayList1.get(0);
	if(pvariableNode1 != null)
	{
	  listNode2.add(pvariableNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new135() /* reduce ANonTerminal$Variable */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PVariable pvariableNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pvariableNode2 = (PVariable)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvariableNode2 != null)
	{
	  listNode3.add(pvariableNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new136() /* reduce ATerminal$Function */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PFunction pfunctionNode1;
        pfunctionNode1 = (PFunction)nodeArrayList1.get(0);
	if(pfunctionNode1 != null)
	{
	  listNode2.add(pfunctionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new137() /* reduce ANonTerminal$Function */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PFunction pfunctionNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pfunctionNode2 = (PFunction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfunctionNode2 != null)
	{
	  listNode3.add(pfunctionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new138() /* reduce ATerminal$Htmlbody */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PHtmlbody phtmlbodyNode1;
        phtmlbodyNode1 = (PHtmlbody)nodeArrayList1.get(0);
	if(phtmlbodyNode1 != null)
	{
	  listNode2.add(phtmlbodyNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new139() /* reduce ANonTerminal$Htmlbody */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PHtmlbody phtmlbodyNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        phtmlbodyNode2 = (PHtmlbody)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(phtmlbodyNode2 != null)
	{
	  listNode3.add(phtmlbodyNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new140() /* reduce ATerminal$Attribute */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PAttribute pattributeNode1;
        pattributeNode1 = (PAttribute)nodeArrayList1.get(0);
	if(pattributeNode1 != null)
	{
	  listNode2.add(pattributeNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new141() /* reduce ANonTerminal$Attribute */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PAttribute pattributeNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pattributeNode2 = (PAttribute)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pattributeNode2 != null)
	{
	  listNode3.add(pattributeNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new142() /* reduce ATerminal$Inputattr */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PInputattr pinputattrNode1;
        pinputattrNode1 = (PInputattr)nodeArrayList1.get(0);
	if(pinputattrNode1 != null)
	{
	  listNode2.add(pinputattrNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new143() /* reduce ANonTerminal$Inputattr */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PInputattr pinputattrNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pinputattrNode2 = (PInputattr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinputattrNode2 != null)
	{
	  listNode3.add(pinputattrNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new144() /* reduce ATerminal$Field */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PField pfieldNode1;
        pfieldNode1 = (PField)nodeArrayList1.get(0);
	if(pfieldNode1 != null)
	{
	  listNode2.add(pfieldNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new145() /* reduce ANonTerminal$Field */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PField pfieldNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pfieldNode2 = (PField)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfieldNode2 != null)
	{
	  listNode3.add(pfieldNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new146() /* reduce ATerminal$Stm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PStm pstmNode1;
        pstmNode1 = (PStm)nodeArrayList1.get(0);
	if(pstmNode1 != null)
	{
	  listNode2.add(pstmNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new147() /* reduce ANonTerminal$Stm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PStm pstmNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pstmNode2 = (PStm)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmNode2 != null)
	{
	  listNode3.add(pstmNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {28, SHIFT, 3}, },
			{{-1, ERROR, 2}, {63, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {1, SHIFT, 4}, },
			{{-1, ERROR, 4}, {2, SHIFT, 7}, },
			{{-1, REDUCE, 128}, },
			{{-1, ERROR, 6}, {1, SHIFT, 4}, {11, SHIFT, 8}, {12, SHIFT, 9}, {21, SHIFT, 10}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {25, SHIFT, 14}, },
			{{-1, ERROR, 7}, {58, SHIFT, 26}, },
			{{-1, ERROR, 8}, {58, SHIFT, 27}, },
			{{-1, ERROR, 9}, {58, SHIFT, 28}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 14}, {58, SHIFT, 29}, },
			{{-1, REDUCE, 129}, },
			{{-1, REDUCE, 132}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 19}, {58, SHIFT, 30}, },
			{{-1, REDUCE, 136}, },
			{{-1, REDUCE, 130}, },
			{{-1, ERROR, 22}, {12, SHIFT, 9}, {29, SHIFT, 32}, },
			{{-1, ERROR, 23}, {11, SHIFT, 8}, {12, SHIFT, 9}, {21, SHIFT, 10}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {25, SHIFT, 14}, },
			{{-1, ERROR, 24}, {12, SHIFT, 9}, {21, SHIFT, 10}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {25, SHIFT, 14}, },
			{{-1, ERROR, 25}, {12, SHIFT, 9}, {21, SHIFT, 10}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {25, SHIFT, 14}, },
			{{-1, ERROR, 26}, {30, SHIFT, 44}, },
			{{-1, ERROR, 27}, {28, SHIFT, 45}, },
			{{-1, ERROR, 28}, {37, SHIFT, 46}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 33}, {37, SHIFT, 47}, },
			{{-1, ERROR, 31}, {31, SHIFT, 48}, {41, SHIFT, 49}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 131}, },
			{{-1, REDUCE, 133}, },
			{{-1, ERROR, 35}, {12, SHIFT, 9}, {29, SHIFT, 50}, },
			{{-1, ERROR, 36}, {12, SHIFT, 9}, {21, SHIFT, 10}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {25, SHIFT, 14}, },
			{{-1, ERROR, 37}, {12, SHIFT, 9}, {21, SHIFT, 10}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {25, SHIFT, 14}, },
			{{-1, REDUCE, 135}, },
			{{-1, ERROR, 39}, {12, SHIFT, 9}, {29, SHIFT, 54}, },
			{{-1, ERROR, 40}, {12, SHIFT, 9}, {21, SHIFT, 10}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {25, SHIFT, 14}, },
			{{-1, ERROR, 41}, {58, SHIFT, 56}, },
			{{-1, REDUCE, 137}, },
			{{-1, ERROR, 43}, {12, SHIFT, 9}, {29, SHIFT, 57}, },
			{{-1, ERROR, 44}, {3, SHIFT, 58}, },
			{{-1, ERROR, 45}, {21, SHIFT, 10}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 59}, },
			{{-1, ERROR, 46}, {38, SHIFT, 63}, },
			{{-1, ERROR, 47}, {21, SHIFT, 10}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {25, SHIFT, 14}, {38, SHIFT, 64}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 49}, {58, SHIFT, 68}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 51}, {12, SHIFT, 9}, {29, SHIFT, 69}, },
			{{-1, ERROR, 52}, {12, SHIFT, 9}, {21, SHIFT, 10}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {25, SHIFT, 14}, },
			{{-1, ERROR, 53}, {12, SHIFT, 9}, {29, SHIFT, 71}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 55}, {12, SHIFT, 9}, {29, SHIFT, 72}, },
			{{-1, ERROR, 56}, {37, SHIFT, 47}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 58}, {4, SHIFT, 73}, {32, SHIFT, 74}, {34, SHIFT, 75}, {35, SHIFT, 76}, {61, SHIFT, 77}, {62, SHIFT, 78}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 144}, },
			{{-1, ERROR, 61}, {58, SHIFT, 81}, },
			{{-1, ERROR, 62}, {21, SHIFT, 10}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 82}, },
			{{-1, ERROR, 63}, {28, SHIFT, 84}, },
			{{-1, ERROR, 64}, {28, SHIFT, 84}, },
			{{-1, ERROR, 65}, {58, SHIFT, 87}, },
			{{-1, ERROR, 66}, {38, SHIFT, 88}, {41, SHIFT, 89}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 70}, {12, SHIFT, 9}, {29, SHIFT, 90}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 73}, {31, SHIFT, 91}, },
			{{-1, ERROR, 74}, {5, SHIFT, 92}, {6, SHIFT, 93}, {58, SHIFT, 94}, },
			{{-1, ERROR, 75}, {58, SHIFT, 95}, },
			{{-1, ERROR, 76}, {58, SHIFT, 96}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 138}, },
			{{-1, ERROR, 80}, {4, SHIFT, 97}, {32, SHIFT, 74}, {34, SHIFT, 75}, {35, SHIFT, 76}, {61, SHIFT, 77}, {62, SHIFT, 78}, },
			{{-1, ERROR, 81}, {31, SHIFT, 99}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 145}, },
			{{-1, ERROR, 84}, {13, SHIFT, 100}, {14, SHIFT, 101}, {15, SHIFT, 102}, {16, SHIFT, 103}, {18, SHIFT, 104}, {21, SHIFT, 10}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {25, SHIFT, 105}, {26, SHIFT, 106}, {27, SHIFT, 107}, {28, SHIFT, 84}, {29, SHIFT, 108}, {31, SHIFT, 109}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 88}, {28, SHIFT, 84}, },
			{{-1, ERROR, 89}, {21, SHIFT, 10}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {25, SHIFT, 14}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 92}, {7, SHIFT, 134}, {8, SHIFT, 135}, {58, SHIFT, 136}, {59, SHIFT, 137}, {60, SHIFT, 138}, },
			{{-1, ERROR, 93}, {7, SHIFT, 134}, {8, SHIFT, 135}, {58, SHIFT, 136}, {59, SHIFT, 137}, {60, SHIFT, 138}, },
			{{-1, ERROR, 94}, {33, SHIFT, 144}, {58, SHIFT, 136}, {59, SHIFT, 137}, {60, SHIFT, 138}, },
			{{-1, ERROR, 95}, {33, SHIFT, 147}, },
			{{-1, ERROR, 96}, {36, SHIFT, 148}, },
			{{-1, ERROR, 97}, {31, SHIFT, 149}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 100}, {19, SHIFT, 150}, {58, SHIFT, 151}, },
			{{-1, ERROR, 101}, {19, SHIFT, 150}, {58, SHIFT, 151}, },
			{{-1, ERROR, 102}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {31, SHIFT, 155}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 103}, {37, SHIFT, 157}, },
			{{-1, ERROR, 104}, {37, SHIFT, 158}, },
			{{-1, ERROR, 105}, {28, SHIFT, 159}, {58, SHIFT, 29}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 110}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 111}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 112}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, REDUCE, 123}, {37, SHIFT, 164}, {57, SHIFT, 165}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 117}, },
			{{-1, ERROR, 116}, {58, SHIFT, 166}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 119}, {31, SHIFT, 167}, },
			{{-1, REDUCE, 82}, {56, SHIFT, 168}, },
			{{-1, REDUCE, 84}, {55, SHIFT, 169}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 93}, {32, SHIFT, 170}, {33, SHIFT, 171}, {45, SHIFT, 172}, {46, SHIFT, 173}, {47, SHIFT, 174}, {48, SHIFT, 175}, {50, SHIFT, 176}, {51, SHIFT, 177}, },
			{{-1, REDUCE, 96}, {52, SHIFT, 178}, {53, SHIFT, 179}, {54, SHIFT, 180}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 102}, {42, SHIFT, 181}, {43, SHIFT, 182}, {44, SHIFT, 183}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 111}, {30, SHIFT, 184}, },
			{{-1, ERROR, 130}, {13, SHIFT, 100}, {14, SHIFT, 101}, {15, SHIFT, 102}, {16, SHIFT, 103}, {18, SHIFT, 104}, {21, SHIFT, 10}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {25, SHIFT, 105}, {26, SHIFT, 106}, {27, SHIFT, 107}, {28, SHIFT, 84}, {29, SHIFT, 185}, {31, SHIFT, 109}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 131}, {13, SHIFT, 100}, {14, SHIFT, 101}, {15, SHIFT, 102}, {16, SHIFT, 103}, {18, SHIFT, 104}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {28, SHIFT, 84}, {29, SHIFT, 187}, {31, SHIFT, 109}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 134}, {30, SHIFT, 189}, },
			{{-1, ERROR, 135}, {30, SHIFT, 190}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 24}, {30, SHIFT, 191}, },
			{{-1, ERROR, 142}, {7, SHIFT, 134}, {8, SHIFT, 135}, {33, SHIFT, 192}, {58, SHIFT, 136}, {59, SHIFT, 137}, {60, SHIFT, 138}, },
			{{-1, ERROR, 143}, {7, SHIFT, 134}, {8, SHIFT, 135}, {33, SHIFT, 194}, {58, SHIFT, 136}, {59, SHIFT, 137}, {60, SHIFT, 138}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 140}, },
			{{-1, ERROR, 146}, {33, SHIFT, 195}, {58, SHIFT, 136}, {59, SHIFT, 137}, {60, SHIFT, 138}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 150}, {58, SHIFT, 197}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 152}, {20, SHIFT, 198}, {31, SHIFT, 199}, },
			{{-1, ERROR, 153}, {31, SHIFT, 201}, },
			{{-1, ERROR, 154}, {28, SHIFT, 159}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 156}, {31, SHIFT, 202}, },
			{{-1, ERROR, 157}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 158}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 159}, {29, SHIFT, 205}, {58, SHIFT, 206}, },
			{{-1, ERROR, 160}, {38, SHIFT, 209}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 164}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {38, SHIFT, 210}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 165}, {58, SHIFT, 213}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 168}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 169}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 170}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 171}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 172}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 173}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 174}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 175}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 176}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 177}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 178}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 179}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 180}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 181}, {37, SHIFT, 227}, {58, SHIFT, 228}, },
			{{-1, ERROR, 182}, {37, SHIFT, 229}, {58, SHIFT, 230}, },
			{{-1, ERROR, 183}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 184}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 186}, {13, SHIFT, 100}, {14, SHIFT, 101}, {15, SHIFT, 102}, {16, SHIFT, 103}, {18, SHIFT, 104}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {28, SHIFT, 84}, {29, SHIFT, 233}, {31, SHIFT, 109}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 147}, },
			{{-1, ERROR, 189}, {9, SHIFT, 234}, {10, SHIFT, 235}, },
			{{-1, ERROR, 190}, {58, SHIFT, 136}, {59, SHIFT, 137}, {60, SHIFT, 138}, },
			{{-1, ERROR, 191}, {58, SHIFT, 136}, {59, SHIFT, 137}, {60, SHIFT, 138}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 143}, },
			{{-1, ERROR, 194}, {32, SHIFT, 74}, {34, SHIFT, 239}, {35, SHIFT, 76}, {61, SHIFT, 77}, {62, SHIFT, 78}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 141}, },
			{{-1, ERROR, 197}, {39, SHIFT, 241}, },
			{{-1, ERROR, 198}, {39, SHIFT, 242}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 200}, {31, SHIFT, 243}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 203}, {38, SHIFT, 244}, },
			{{-1, ERROR, 204}, {38, SHIFT, 245}, },
			{{-1, REDUCE, 118}, },
			{{-1, ERROR, 206}, {30, SHIFT, 246}, },
			{{-1, ERROR, 207}, {29, SHIFT, 247}, {41, SHIFT, 248}, },
			{{-1, REDUCE, 125}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 121}, },
			{{-1, ERROR, 212}, {38, SHIFT, 249}, {41, SHIFT, 250}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 83}, {55, SHIFT, 169}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 89}, {50, SHIFT, 176}, {51, SHIFT, 177}, },
			{{-1, REDUCE, 90}, {50, SHIFT, 176}, {51, SHIFT, 177}, },
			{{-1, REDUCE, 87}, {50, SHIFT, 176}, {51, SHIFT, 177}, },
			{{-1, REDUCE, 88}, {50, SHIFT, 176}, {51, SHIFT, 177}, },
			{{-1, REDUCE, 91}, {50, SHIFT, 176}, {51, SHIFT, 177}, },
			{{-1, REDUCE, 92}, {50, SHIFT, 176}, {51, SHIFT, 177}, },
			{{-1, REDUCE, 95}, {52, SHIFT, 178}, {53, SHIFT, 179}, {54, SHIFT, 180}, },
			{{-1, REDUCE, 94}, {52, SHIFT, 178}, {53, SHIFT, 179}, {54, SHIFT, 180}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 227}, {58, SHIFT, 166}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 229}, {58, SHIFT, 166}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 81}, {56, SHIFT, 168}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 239}, {6, SHIFT, 253}, {58, SHIFT, 95}, },
			{{-1, ERROR, 240}, {32, SHIFT, 74}, {34, SHIFT, 254}, {35, SHIFT, 76}, {61, SHIFT, 77}, {62, SHIFT, 78}, },
			{{-1, ERROR, 241}, {58, SHIFT, 255}, },
			{{-1, ERROR, 242}, {58, SHIFT, 258}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 244}, {13, SHIFT, 262}, {14, SHIFT, 263}, {15, SHIFT, 264}, {16, SHIFT, 265}, {18, SHIFT, 266}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {28, SHIFT, 84}, {31, SHIFT, 267}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 245}, {13, SHIFT, 100}, {14, SHIFT, 101}, {15, SHIFT, 102}, {16, SHIFT, 103}, {18, SHIFT, 104}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {28, SHIFT, 84}, {31, SHIFT, 109}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 246}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, REDUCE, 119}, },
			{{-1, ERROR, 248}, {58, SHIFT, 206}, },
			{{-1, REDUCE, 113}, },
			{{-1, ERROR, 250}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 251}, {38, SHIFT, 276}, {41, SHIFT, 49}, },
			{{-1, ERROR, 252}, {38, SHIFT, 277}, {41, SHIFT, 49}, },
			{{-1, ERROR, 253}, {33, SHIFT, 278}, },
			{{-1, ERROR, 254}, {6, SHIFT, 279}, {58, SHIFT, 95}, },
			{{-1, ERROR, 255}, {30, SHIFT, 280}, },
			{{-1, ERROR, 256}, {40, SHIFT, 281}, {41, SHIFT, 282}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 123}, {57, SHIFT, 165}, },
			{{-1, ERROR, 259}, {40, SHIFT, 283}, {41, SHIFT, 284}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 261}, {30, SHIFT, 285}, },
			{{-1, ERROR, 262}, {19, SHIFT, 150}, {58, SHIFT, 151}, },
			{{-1, ERROR, 263}, {19, SHIFT, 150}, {58, SHIFT, 151}, },
			{{-1, ERROR, 264}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {31, SHIFT, 288}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 265}, {37, SHIFT, 290}, },
			{{-1, ERROR, 266}, {37, SHIFT, 291}, },
			{{-1, REDUCE, 47}, {17, REDUCE, 58}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 269}, {17, SHIFT, 292}, },
			{{-1, REDUCE, 56}, {17, REDUCE, 66}, },
			{{-1, ERROR, 271}, {31, SHIFT, 293}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 126}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 279}, {33, SHIFT, 294}, },
			{{-1, ERROR, 280}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 282}, {58, SHIFT, 255}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 284}, {58, SHIFT, 258}, },
			{{-1, ERROR, 285}, {58, SHIFT, 298}, },
			{{-1, ERROR, 286}, {20, SHIFT, 198}, {31, SHIFT, 299}, },
			{{-1, ERROR, 287}, {31, SHIFT, 301}, },
			{{-1, REDUCE, 51}, {17, REDUCE, 62}, },
			{{-1, ERROR, 289}, {31, SHIFT, 302}, },
			{{-1, ERROR, 290}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 291}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 292}, {13, SHIFT, 100}, {14, SHIFT, 101}, {15, SHIFT, 102}, {16, SHIFT, 103}, {18, SHIFT, 104}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {28, SHIFT, 84}, {31, SHIFT, 109}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, REDUCE, 57}, {17, REDUCE, 67}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 48}, {17, REDUCE, 59}, },
			{{-1, ERROR, 300}, {31, SHIFT, 306}, },
			{{-1, REDUCE, 50}, {17, REDUCE, 61}, },
			{{-1, REDUCE, 52}, {17, REDUCE, 63}, },
			{{-1, ERROR, 303}, {38, SHIFT, 307}, },
			{{-1, ERROR, 304}, {38, SHIFT, 308}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 49}, {17, REDUCE, 60}, },
			{{-1, ERROR, 307}, {13, SHIFT, 262}, {14, SHIFT, 263}, {15, SHIFT, 264}, {16, SHIFT, 265}, {18, SHIFT, 266}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {28, SHIFT, 84}, {31, SHIFT, 267}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 308}, {13, SHIFT, 262}, {14, SHIFT, 263}, {15, SHIFT, 264}, {16, SHIFT, 265}, {18, SHIFT, 266}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {28, SHIFT, 84}, {31, SHIFT, 267}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, ERROR, 309}, {17, SHIFT, 311}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 311}, {13, SHIFT, 262}, {14, SHIFT, 263}, {15, SHIFT, 264}, {16, SHIFT, 265}, {18, SHIFT, 266}, {25, SHIFT, 154}, {26, SHIFT, 106}, {27, SHIFT, 107}, {28, SHIFT, 84}, {31, SHIFT, 267}, {37, SHIFT, 110}, {49, SHIFT, 111}, {50, SHIFT, 112}, {58, SHIFT, 113}, {59, SHIFT, 114}, {60, SHIFT, 115}, },
			{{-1, REDUCE, 64}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 5}, {6, 15}, },
			{{-1, 79}, {80, 98}, {240, 98}, },
			{{-1, 139}, {142, 193}, {143, 193}, },
			{{-1, 236}, },
			{{-1, 140}, {94, 145}, {146, 196}, },
			{{-1, 141}, {190, 237}, {191, 238}, },
			{{-1, 16}, {23, 34}, },
			{{-1, 60}, {62, 83}, },
			{{-1, 17}, {24, 38}, {36, 38}, {130, 38}, },
			{{-1, 31}, {227, 251}, {229, 252}, },
			{{-1, 18}, {45, 61}, {62, 61}, },
			{{-1, 19}, {25, 41}, {37, 41}, {40, 41}, {47, 65}, {52, 41}, {84, 116}, {89, 65}, {130, 116}, },
			{{-1, 20}, {25, 42}, {37, 42}, {40, 42}, {52, 42}, },
			{{-1, 66}, },
			{{-1, 67}, {89, 133}, },
			{{-1, 21}, {22, 33}, {35, 33}, {39, 33}, {43, 33}, {51, 33}, {53, 33}, {55, 33}, {70, 33}, },
			{{-1, 117}, {131, 188}, {186, 188}, {244, 268}, {245, 272}, {292, 305}, {307, 268}, {308, 272}, {311, 305}, },
			{{-1, 269}, {307, 309}, {308, 310}, {311, 312}, },
			{{-1, 152}, {101, 153}, {262, 286}, {263, 287}, },
			{{-1, 200}, {286, 300}, },
			{{-1, 118}, {63, 85}, {64, 86}, {88, 132}, {244, 270}, {307, 270}, {308, 270}, {311, 270}, },
			{{-1, 256}, },
			{{-1, 257}, {282, 296}, },
			{{-1, 259}, },
			{{-1, 260}, {284, 297}, },
			{{-1, 119}, {102, 156}, {110, 160}, {157, 203}, {158, 204}, {164, 211}, {244, 271}, {246, 273}, {250, 275}, {264, 289}, {280, 295}, {290, 303}, {291, 304}, {307, 271}, {308, 271}, {311, 271}, },
			{{-1, 120}, {184, 232}, },
			{{-1, 121}, {168, 214}, },
			{{-1, 122}, {169, 215}, },
			{{-1, 123}, {170, 216}, {171, 217}, {172, 218}, {173, 219}, {174, 220}, {175, 221}, },
			{{-1, 124}, {176, 222}, {177, 223}, },
			{{-1, 125}, {178, 224}, {179, 225}, {180, 226}, {183, 231}, },
			{{-1, 126}, },
			{{-1, 127}, },
			{{-1, 128}, {111, 161}, {112, 163}, },
			{{-1, 212}, },
			{{-1, 129}, {111, 162}, {112, 162}, {168, 162}, {169, 162}, {170, 162}, {171, 162}, {172, 162}, {173, 162}, {174, 162}, {175, 162}, {176, 162}, {177, 162}, {178, 162}, {179, 162}, {180, 162}, {183, 162}, {184, 162}, {242, 261}, {284, 261}, },
			{{-1, 207}, },
			{{-1, 208}, {248, 274}, },
			{{-1, 6}, },
			{{-1, 22}, {23, 35}, {24, 39}, {25, 43}, {36, 51}, {37, 53}, {40, 55}, {52, 70}, },
			{{-1, 23}, },
			{{-1, 24}, {23, 36}, {84, 130}, },
			{{-1, 25}, {23, 37}, {24, 40}, {36, 52}, },
			{{-1, 80}, {194, 240}, },
			{{-1, 146}, },
			{{-1, 142}, {93, 143}, },
			{{-1, 62}, },
			{{-1, 131}, {130, 186}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'service'",
			"expecting: '{'",
			"expecting: EOF",
			"expecting: 'const'",
			"expecting: 'html'",
			"expecting: 'const', 'schema', 'session', 'int', 'bool', 'string', 'void', 'tuple'",
			"expecting: identifier",
			"expecting: 'schema', 'session', 'int', 'bool', 'string', 'void', 'tuple'",
			"expecting: 'session', 'show', 'exit', 'return', 'if', 'while', 'int', 'bool', 'string', 'void', 'tuple', 'true', 'false', '{', '}', ';', '(', '!', '-', identifier, intconst, stringconst",
			"expecting: 'session', 'int', 'bool', 'string', 'void', 'tuple'",
			"expecting: 'session', '}'",
			"expecting: '='",
			"expecting: '('",
			"expecting: ';', '(', ','",
			"expecting: ';', ','",
			"expecting: '<html>'",
			"expecting: 'int', 'bool', 'string', 'void', '}'",
			"expecting: ')'",
			"expecting: 'int', 'bool', 'string', 'void', 'tuple', ')'",
			"expecting: '</html>', '<', '</', '<[', meta, whatever",
			"expecting: ')', ','",
			"expecting: ';', ')', ','",
			"expecting: ';'",
			"expecting: 'input', 'select', identifier",
			"expecting: 'show', 'exit', 'return', 'if', 'while', 'int', 'bool', 'string', 'void', 'tuple', 'true', 'false', '{', '}', ';', '(', '!', '-', identifier, intconst, stringconst",
			"expecting: 'int', 'bool', 'string', 'void', 'tuple'",
			"expecting: 'type', 'name', identifier, intconst, stringconst",
			"expecting: '>', identifier, intconst, stringconst",
			"expecting: '>'",
			"expecting: ']>'",
			"expecting: 'plug', identifier",
			"expecting: 'tuple', 'true', 'false', ';', '(', '!', '-', identifier, intconst, stringconst",
			"expecting: '{', identifier",
			"expecting: '}', ';', '<', '>', ')', ']', ',', '\+', '\-', '<<', '==', '!=', '<=', '>=', '-', '+', '*', '/', '%', '&&', '||'",
			"expecting: 'session', 'show', 'exit', 'return', 'if', 'else', 'while', 'int', 'bool', 'string', 'void', 'tuple', 'true', 'false', '{', '}', ';', '(', '!', '-', identifier, intconst, stringconst",
			"expecting: 'show', 'exit', 'return', 'if', 'while', 'tuple', 'true', 'false', '{', '}', ';', '(', '!', '-', identifier, intconst, stringconst",
			"expecting: 'tuple', 'true', 'false', '(', '!', '-', identifier, intconst, stringconst",
			"expecting: 'tuple', 'true', 'false', '(', identifier, intconst, stringconst",
			"expecting: '}', '=', ';', '<', '>', '(', ')', ']', ',', '\+', '\-', '<<', '==', '!=', '<=', '>=', '-', '+', '*', '/', '%', '&&', '||', '.'",
			"expecting: '}', ';', ')', ']', ',', '||'",
			"expecting: '}', ';', ')', ']', ',', '&&', '||'",
			"expecting: '}', ';', '<', '>', ')', ']', ',', '==', '!=', '<=', '>=', '-', '+', '&&', '||'",
			"expecting: '}', ';', '<', '>', ')', ']', ',', '==', '!=', '<=', '>=', '-', '+', '*', '/', '%', '&&', '||'",
			"expecting: '}', '=', ';', '<', '>', ')', ']', ',', '\+', '\-', '<<', '==', '!=', '<=', '>=', '-', '+', '*', '/', '%', '&&', '||'",
			"expecting: 'type', 'name', '=', '>', identifier, intconst, stringconst",
			"expecting: 'type', 'name', '>', identifier, intconst, stringconst",
			"expecting: 'receive', ';'",
			"expecting: '}', identifier",
			"expecting: 'tuple', 'true', 'false', '(', ')', '!', '-', identifier, intconst, stringconst",
			"expecting: '(', identifier",
			"expecting: text, radio",
			"expecting: identifier, intconst, stringconst",
			"expecting: '<', '</', '<[', meta, whatever",
			"expecting: '['",
			"expecting: '}', ','",
			"expecting: '}', ';', ')', ']', ',', '-', '+', '&&', '||'",
			"expecting: 'select', identifier",
			"expecting: 'show', 'exit', 'return', 'if', 'while', 'tuple', 'true', 'false', '{', ';', '(', '!', '-', identifier, intconst, stringconst",
			"expecting: ']', ','",
			"expecting: '=', '.'",
			"expecting: 'show', 'exit', 'return', 'if', 'else', 'while', 'tuple', 'true', 'false', '{', '}', ';', '(', '!', '-', identifier, intconst, stringconst",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 8, 6, 6, 9, 10, 10, 7, 9, 9, 11, 1, 12, 6, 13, 14, 2, 10, 7, 10, 9, 9, 8, 10, 9, 6, 9, 10, 15, 16, 17, 18, 8, 6, 2, 10, 9, 10, 2, 10, 12, 2, 19, 7, 16, 6, 16, 1, 1, 6, 20, 20, 21, 2, 10, 2, 2, 22, 23, 6, 6, 19, 19, 19, 19, 22, 7, 16, 24, 10, 9, 20, 1, 25, 2, 5, 26, 26, 27, 28, 29, 22, 19, 16, 30, 30, 31, 12, 12, 32, 33, 33, 34, 35, 36, 37, 37, 38, 33, 33, 6, 35, 35, 22, 39, 40, 40, 41, 42, 42, 33, 33, 33, 43, 24, 35, 9, 20, 11, 11, 44, 44, 44, 45, 45, 44, 45, 45, 19, 27, 27, 19, 19, 5, 6, 46, 46, 22, 1, 35, 22, 36, 36, 47, 17, 33, 33, 33, 48, 6, 21, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 49, 49, 36, 36, 34, 35, 34, 35, 50, 51, 51, 19, 45, 52, 19, 27, 53, 53, 35, 22, 35, 35, 17, 17, 33, 11, 54, 54, 33, 33, 20, 20, 43, 40, 40, 55, 55, 55, 55, 55, 55, 42, 42, 42, 42, 42, 6, 33, 6, 33, 42, 39, 34, 45, 45, 45, 45, 45, 56, 52, 6, 6, 35, 57, 57, 36, 33, 6, 33, 36, 20, 20, 28, 56, 11, 58, 58, 59, 58, 58, 11, 30, 30, 31, 12, 12, 60, 35, 61, 60, 22, 35, 54, 54, 20, 33, 33, 19, 28, 36, 46, 6, 22, 6, 6, 46, 22, 60, 22, 36, 36, 57, 60, 19, 58, 58, 58, 58, 60, 22, 60, 60, 17, 17, 35, 60, 57, 57, 61, 61, 57, 61, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            actionTable = new int[length][][];
            for(int i = 0; i < actionTable.length; i++)
            {
                length = s.readInt();
                actionTable[i] = new int[length][3];
                for(int j = 0; j < actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
