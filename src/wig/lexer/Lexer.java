/* This file was generated by SableCC (http://www.sablecc.org/). */

package wig.lexer;

import java.io.*;
import java.util.*;
import wig.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.STEADY;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.HTML; break;
                            }
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.HTMLTAG; break;
                            }
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.HTMLTAG; break;
                            }
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.HTMLKEY; break;
                            }
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.HTMLTAG; break;
                            }
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 5: state = State.HTMLTAG; break;
                            }
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 5: state = State.HTMLTAG; break;
                            }
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 5: state = State.HTMLKEY; break;
                                case 2: state = State.HTMLRIGHT; break;
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.HTMLTAG; break;
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.HTML; break;
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.HTMLTAG; break;
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.HTMLHOLE; break;
                                case 4: state = State.HTMLTAGHOLE; break;
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 3: state = State.HTML; break;
                                case 6: state = State.HTMLTAG; break;
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 3: state = State.HTMLHOLE; break;
                                case 4: state = State.HTMLTAG; break;
                                case 2: state = State.HTMLTAG; break;
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 4: state = State.HTMLTAG; break;
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 4: state = State.HTMLTAG; break;
                                case 0: state = State.STEADY; break;
                            }
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.HTML; break;
                            }
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.HTML; break;
                            }
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TEol(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new2(String text, int line, int pos) { return new TCommentline(text, line, pos); }
    Token new3(String text, int line, int pos) { return new TCommentmulti(text, line, pos); }
    Token new4(int line, int pos) { return new TService(line, pos); }
    Token new5(int line, int pos) { return new TConst(line, pos); }
    Token new6(int line, int pos) { return new THtml(line, pos); }
    Token new7(int line, int pos) { return new THtmlTagStart(line, pos); }
    Token new8(int line, int pos) { return new THtmlTagEnd(line, pos); }
    Token new9(int line, int pos) { return new TInput(line, pos); }
    Token new10(int line, int pos) { return new TSelect(line, pos); }
    Token new11(int line, int pos) { return new TType(line, pos); }
    Token new12(int line, int pos) { return new TName(line, pos); }
    Token new13(String text, int line, int pos) { return new TText(text, line, pos); }
    Token new14(String text, int line, int pos) { return new TRadio(text, line, pos); }
    Token new15(int line, int pos) { return new TSchema(line, pos); }
    Token new16(int line, int pos) { return new TSession(line, pos); }
    Token new17(int line, int pos) { return new TShow(line, pos); }
    Token new18(int line, int pos) { return new TExit(line, pos); }
    Token new19(int line, int pos) { return new TReturn(line, pos); }
    Token new20(int line, int pos) { return new TIf(line, pos); }
    Token new21(int line, int pos) { return new TElse(line, pos); }
    Token new22(int line, int pos) { return new TWhile(line, pos); }
    Token new23(int line, int pos) { return new TPlug(line, pos); }
    Token new24(int line, int pos) { return new TReceive(line, pos); }
    Token new25(int line, int pos) { return new TInt(line, pos); }
    Token new26(int line, int pos) { return new TBool(line, pos); }
    Token new27(int line, int pos) { return new TString(line, pos); }
    Token new28(int line, int pos) { return new TVoid(line, pos); }
    Token new29(int line, int pos) { return new TTuple(line, pos); }
    Token new30(int line, int pos) { return new TTrue(line, pos); }
    Token new31(int line, int pos) { return new TFalse(line, pos); }
    Token new32(int line, int pos) { return new TLBrace(line, pos); }
    Token new33(int line, int pos) { return new TRBrace(line, pos); }
    Token new34(int line, int pos) { return new TAssign(line, pos); }
    Token new35(int line, int pos) { return new TSemicolon(line, pos); }
    Token new36(int line, int pos) { return new TLt(line, pos); }
    Token new37(int line, int pos) { return new TGt(line, pos); }
    Token new38(int line, int pos) { return new TLtSlash(line, pos); }
    Token new39(int line, int pos) { return new TLtBracket(line, pos); }
    Token new40(int line, int pos) { return new TGtBracket(line, pos); }
    Token new41(int line, int pos) { return new TLPar(line, pos); }
    Token new42(int line, int pos) { return new TRPar(line, pos); }
    Token new43(int line, int pos) { return new TLBracket(line, pos); }
    Token new44(int line, int pos) { return new TRBracket(line, pos); }
    Token new45(int line, int pos) { return new TComma(line, pos); }
    Token new46(int line, int pos) { return new TKeep(line, pos); }
    Token new47(int line, int pos) { return new TRemove(line, pos); }
    Token new48(int line, int pos) { return new TJoin(line, pos); }
    Token new49(int line, int pos) { return new TEq(line, pos); }
    Token new50(int line, int pos) { return new TNeq(line, pos); }
    Token new51(int line, int pos) { return new TLteq(line, pos); }
    Token new52(int line, int pos) { return new TGteq(line, pos); }
    Token new53(int line, int pos) { return new TNot(line, pos); }
    Token new54(int line, int pos) { return new TMinus(line, pos); }
    Token new55(int line, int pos) { return new TPlus(line, pos); }
    Token new56(int line, int pos) { return new TMult(line, pos); }
    Token new57(int line, int pos) { return new TDiv(line, pos); }
    Token new58(int line, int pos) { return new TMod(line, pos); }
    Token new59(int line, int pos) { return new TAnd(line, pos); }
    Token new60(int line, int pos) { return new TOr(line, pos); }
    Token new61(int line, int pos) { return new TDot(line, pos); }
    Token new62(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new63(String text, int line, int pos) { return new TIntconst(text, line, pos); }
    Token new64(String text, int line, int pos) { return new TStringconst(text, line, pos); }
    Token new65(String text, int line, int pos) { return new TMeta(text, line, pos); }
    Token new66(String text, int line, int pos) { return new TWhatever(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // STEADY
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {37, 37, 7}, {38, 38, 8}, {40, 40, 9}, {41, 41, 10}, {42, 42, 11}, {43, 43, 12}, {44, 44, 13}, {45, 45, 14}, {46, 46, 15}, {47, 47, 16}, {48, 48, 17}, {49, 57, 18}, {59, 59, 19}, {60, 60, 20}, {61, 61, 21}, {62, 62, 22}, {65, 90, 23}, {91, 91, 24}, {92, 92, 25}, {93, 93, 26}, {95, 95, 27}, {97, 97, 28}, {98, 98, 29}, {99, 99, 30}, {100, 100, 28}, {101, 101, 31}, {102, 102, 32}, {103, 103, 28}, {104, 104, 33}, {105, 105, 34}, {106, 111, 28}, {112, 112, 35}, {113, 113, 28}, {114, 114, 36}, {115, 115, 37}, {116, 116, 38}, {117, 117, 28}, {118, 118, 39}, {119, 119, 40}, {120, 122, 28}, {123, 123, 41}, {124, 124, 42}, {125, 125, 43}, },
            {},
            {},
            {{10, 10, 44}, },
            {},
            {{61, 61, 45}, },
            {{0, 33, 46}, {34, 34, 47}, {35, 65535, 46}, },
            {},
            {{38, 38, 48}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{42, 42, 49}, {47, 47, 50}, },
            {},
            {{48, 57, 51}, },
            {},
            {{47, 47, 52}, {60, 60, 53}, {61, 61, 54}, {91, 91, 55}, {104, 104, 56}, },
            {{61, 61, 57}, },
            {{61, 61, 58}, },
            {{48, 57, 59}, {65, 90, 60}, {95, 95, 61}, {97, 122, 62}, },
            {},
            {{43, 43, 63}, {45, 45, 64}, },
            {{62, 62, 65}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 110, 62}, {111, 111, 66}, {112, 122, 62}, },
            {{48, 110, -31}, {111, 111, 67}, {112, 122, 62}, },
            {{48, 95, -25}, {97, 107, 62}, {108, 108, 68}, {109, 119, 62}, {120, 120, 69}, {121, 122, 62}, },
            {{48, 95, -25}, {97, 97, 70}, {98, 122, 62}, },
            {{48, 95, -25}, {97, 115, 62}, {116, 116, 71}, {117, 122, 62}, },
            {{48, 95, -25}, {97, 101, 62}, {102, 102, 72}, {103, 109, 62}, {110, 110, 73}, {111, 122, 62}, },
            {{48, 107, -33}, {108, 108, 74}, {109, 122, 62}, },
            {{48, 95, -25}, {97, 100, 62}, {101, 101, 75}, {102, 122, 62}, },
            {{48, 95, -25}, {97, 98, 62}, {99, 99, 76}, {100, 100, 62}, {101, 101, 77}, {102, 103, 62}, {104, 104, 78}, {105, 115, 62}, {116, 116, 79}, {117, 122, 62}, },
            {{48, 95, -25}, {97, 113, 62}, {114, 114, 80}, {115, 116, 62}, {117, 117, 81}, {118, 122, 62}, },
            {{48, 110, -31}, {111, 111, 82}, {112, 122, 62}, },
            {{48, 95, -25}, {97, 103, 62}, {104, 104, 83}, {105, 122, 62}, },
            {},
            {{124, 124, 84}, },
            {},
            {},
            {},
            {{0, 65535, -8}, },
            {},
            {},
            {{0, 41, 85}, {42, 42, 86}, {43, 65535, 85}, },
            {{0, 9, 87}, {10, 10, 88}, {11, 12, 87}, {13, 13, 89}, {14, 65535, 87}, },
            {{48, 57, 51}, },
            {},
            {},
            {},
            {},
            {{116, 116, 90}, },
            {},
            {},
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {},
            {},
            {},
            {{48, 110, -31}, {111, 111, 91}, {112, 122, 62}, },
            {{48, 95, -25}, {97, 109, 62}, {110, 110, 92}, {111, 122, 62}, },
            {{48, 95, -25}, {97, 114, 62}, {115, 115, 93}, {116, 122, 62}, },
            {{48, 95, -25}, {97, 104, 62}, {105, 105, 94}, {106, 122, 62}, },
            {{48, 107, -33}, {108, 108, 95}, {109, 122, 62}, },
            {{48, 95, -25}, {97, 108, 62}, {109, 109, 96}, {110, 122, 62}, },
            {{48, 122, -25}, },
            {{48, 115, -35}, {116, 116, 97}, {117, 122, 62}, },
            {{48, 95, -25}, {97, 116, 62}, {117, 117, 98}, {118, 122, 62}, },
            {{48, 98, -39}, {99, 99, 99}, {100, 115, 62}, {116, 116, 100}, {117, 122, 62}, },
            {{48, 103, -42}, {104, 104, 101}, {105, 122, 62}, },
            {{48, 113, -40}, {114, 114, 102}, {115, 115, 103}, {116, 122, 62}, },
            {{48, 110, -31}, {111, 111, 104}, {112, 122, 62}, },
            {{48, 113, -40}, {114, 114, 105}, {115, 122, 62}, },
            {{48, 116, -76}, {117, 117, 106}, {118, 122, 62}, },
            {{48, 95, -25}, {97, 111, 62}, {112, 112, 107}, {113, 122, 62}, },
            {{48, 104, -71}, {105, 105, 108}, {106, 122, 62}, },
            {{48, 104, -71}, {105, 105, 109}, {106, 122, 62}, },
            {},
            {{0, 65535, -51}, },
            {{0, 41, 110}, {42, 42, 111}, {43, 46, 110}, {47, 47, 112}, {48, 65535, 110}, },
            {{0, 65535, -52}, },
            {},
            {{10, 10, 113}, },
            {{109, 109, 114}, },
            {{48, 107, -33}, {108, 108, 115}, {109, 122, 62}, },
            {{48, 114, -70}, {115, 115, 116}, {116, 122, 62}, },
            {{48, 100, -38}, {101, 101, 117}, {102, 122, 62}, },
            {{48, 115, -35}, {116, 116, 118}, {117, 122, 62}, },
            {{48, 114, -70}, {115, 115, 119}, {116, 122, 62}, },
            {{48, 107, -33}, {108, 108, 120}, {109, 122, 62}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 102, 62}, {103, 103, 121}, {104, 122, 62}, },
            {{48, 100, -38}, {101, 101, 122}, {102, 122, 62}, },
            {{48, 116, -76}, {117, 117, 123}, {118, 122, 62}, },
            {{48, 100, -38}, {101, 101, 124}, {102, 122, 62}, },
            {{48, 95, -25}, {97, 117, 62}, {118, 118, 125}, {119, 122, 62}, },
            {{48, 114, -70}, {115, 115, 126}, {116, 122, 62}, },
            {{48, 95, -25}, {97, 118, 62}, {119, 119, 127}, {120, 122, 62}, },
            {{48, 104, -71}, {105, 105, 128}, {106, 122, 62}, },
            {{48, 100, -38}, {101, 101, 129}, {102, 122, 62}, },
            {{48, 107, -33}, {108, 108, 130}, {109, 122, 62}, },
            {{48, 95, -25}, {97, 99, 62}, {100, 100, 131}, {101, 122, 62}, },
            {{48, 107, -33}, {108, 108, 132}, {109, 122, 62}, },
            {{0, 65535, -51}, },
            {{0, 42, -51}, {43, 46, 85}, {47, 47, 133}, {48, 65535, 85}, },
            {},
            {},
            {{108, 108, 134}, },
            {{48, 122, -25}, },
            {{48, 115, -35}, {116, 116, 135}, {117, 122, 62}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 100, -38}, {101, 101, 136}, {102, 122, 62}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 104, -71}, {105, 105, 137}, {106, 122, 62}, },
            {{48, 113, -40}, {114, 114, 138}, {115, 122, 62}, },
            {{48, 108, -73}, {109, 109, 139}, {110, 122, 62}, },
            {{48, 104, -71}, {105, 105, 140}, {106, 122, 62}, },
            {{48, 104, -71}, {105, 105, 141}, {106, 122, 62}, },
            {{48, 122, -25}, },
            {{48, 109, -69}, {110, 110, 142}, {111, 122, 62}, },
            {{48, 122, -25}, },
            {{48, 100, -38}, {101, 101, 143}, {102, 122, 62}, },
            {{48, 122, -25}, },
            {{48, 100, -38}, {101, 101, 144}, {102, 122, 62}, },
            {{0, 65535, -51}, },
            {{62, 62, 145}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 117, -104}, {118, 118, 146}, {119, 122, 62}, },
            {{48, 109, -69}, {110, 110, 147}, {111, 122, 62}, },
            {{48, 95, -25}, {97, 97, 148}, {98, 122, 62}, },
            {{48, 98, -39}, {99, 99, 149}, {100, 122, 62}, },
            {{48, 110, -31}, {111, 111, 150}, {112, 122, 62}, },
            {{48, 102, -100}, {103, 103, 151}, {104, 122, 62}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {},
            {{48, 100, -38}, {101, 101, 152}, {102, 122, 62}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 100, -38}, {101, 101, 153}, {102, 122, 62}, },
            {{48, 109, -69}, {110, 110, 154}, {111, 122, 62}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
        }
        { // HTML
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 12, 1}, {13, 13, 4}, {14, 31, 1}, {32, 32, 5}, {33, 46, 1}, {47, 47, 6}, {48, 59, 1}, {60, 60, 7}, {61, 61, 1}, {63, 65535, 1}, },
            {{0, 59, 1}, {61, 65535, -2}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 9, 1}, {10, 10, 8}, {11, 59, 1}, {61, 65535, -2}, },
            {{0, 65535, -3}, },
            {{0, 41, 1}, {42, 42, 9}, {43, 46, 1}, {47, 47, 10}, {48, 59, 1}, {61, 65535, -2}, },
            {{33, 33, 11}, {47, 47, 12}, {91, 91, 13}, },
            {{0, 65535, -3}, },
            {{0, 41, 14}, {42, 42, 15}, {43, 59, 14}, {60, 60, 16}, {61, 61, 14}, {62, 62, 16}, {63, 65535, 14}, },
            {{0, 9, 17}, {10, 10, 18}, {11, 12, 17}, {13, 13, 19}, {14, 59, 17}, {60, 60, 20}, {61, 61, 17}, {62, 62, 20}, {63, 65535, 17}, },
            {{45, 45, 21}, },
            {{104, 104, 22}, },
            {},
            {{0, 65535, -11}, },
            {{0, 41, 23}, {42, 42, 24}, {43, 46, 23}, {47, 47, 25}, {48, 59, 23}, {60, 60, 26}, {61, 61, 23}, {62, 62, 26}, {63, 65535, 23}, },
            {{0, 41, 16}, {42, 42, 27}, {43, 65535, 16}, },
            {{0, 65535, -12}, },
            {{0, 65535, -3}, },
            {{0, 9, 1}, {10, 10, 28}, {11, 65535, -6}, },
            {{0, 9, 20}, {10, 10, 29}, {11, 12, 20}, {13, 13, 30}, {14, 65535, 20}, },
            {{45, 45, 31}, },
            {{116, 116, 32}, },
            {{0, 65535, -11}, },
            {{0, 42, -11}, {43, 46, 14}, {47, 47, 33}, {48, 59, 14}, {60, 65535, -11}, },
            {{0, 65535, -3}, },
            {{0, 65535, -18}, },
            {{0, 41, 26}, {42, 42, 34}, {43, 46, 26}, {47, 47, 35}, {48, 65535, 26}, },
            {{0, 65535, -3}, },
            {},
            {{10, 10, 36}, },
            {{0, 44, 37}, {45, 45, 38}, {46, 65535, 37}, },
            {{109, 109, 39}, },
            {{0, 65535, -11}, },
            {{0, 42, -18}, {43, 46, 16}, {47, 47, 40}, {48, 65535, 16}, },
            {},
            {},
            {{0, 65535, -33}, },
            {{0, 44, 37}, {45, 45, 41}, {46, 65535, 37}, },
            {{108, 108, 42}, },
            {{0, 65535, -18}, },
            {{0, 45, -40}, {46, 61, 37}, {62, 62, 43}, {63, 65535, 37}, },
            {{62, 62, 44}, },
            {{0, 65535, -33}, },
            {},
        }
        { // HTMLTAG
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {47, 47, 5}, {61, 61, 6}, {62, 62, 7}, {65, 90, 8}, {95, 95, 9}, {97, 104, 10}, {105, 105, 11}, {106, 109, 10}, {110, 110, 12}, {111, 114, 10}, {115, 115, 13}, {116, 116, 14}, {117, 122, 10}, },
            {},
            {},
            {{10, 10, 15}, },
            {},
            {{42, 42, 16}, {47, 47, 17}, },
            {},
            {},
            {{48, 57, 18}, {65, 90, 19}, {95, 95, 20}, {97, 122, 21}, },
            {{48, 122, -10}, },
            {{48, 122, -10}, },
            {{48, 95, -10}, {97, 109, 21}, {110, 110, 22}, {111, 122, 21}, },
            {{48, 95, -10}, {97, 97, 23}, {98, 122, 21}, },
            {{48, 95, -10}, {97, 100, 21}, {101, 101, 24}, {102, 122, 21}, },
            {{48, 95, -10}, {97, 120, 21}, {121, 121, 25}, {122, 122, 21}, },
            {},
            {{0, 41, 26}, {42, 42, 27}, {43, 65535, 26}, },
            {{0, 9, 28}, {10, 10, 29}, {11, 12, 28}, {13, 13, 30}, {14, 65535, 28}, },
            {{48, 122, -10}, },
            {{48, 122, -10}, },
            {{48, 122, -10}, },
            {{48, 122, -10}, },
            {{48, 95, -10}, {97, 111, 21}, {112, 112, 31}, {113, 122, 21}, },
            {{48, 95, -10}, {97, 108, 21}, {109, 109, 32}, {110, 122, 21}, },
            {{48, 95, -10}, {97, 107, 21}, {108, 108, 33}, {109, 122, 21}, },
            {{48, 111, -24}, {112, 112, 34}, {113, 122, 21}, },
            {{0, 65535, -18}, },
            {{0, 41, 35}, {42, 42, 36}, {43, 46, 35}, {47, 47, 37}, {48, 65535, 35}, },
            {{0, 65535, -19}, },
            {},
            {{10, 10, 38}, },
            {{48, 95, -10}, {97, 116, 21}, {117, 117, 39}, {118, 122, 21}, },
            {{48, 100, -15}, {101, 101, 40}, {102, 122, 21}, },
            {{48, 100, -15}, {101, 101, 41}, {102, 122, 21}, },
            {{48, 100, -15}, {101, 101, 42}, {102, 122, 21}, },
            {{0, 65535, -18}, },
            {{0, 42, -18}, {43, 46, 26}, {47, 47, 43}, {48, 65535, 26}, },
            {},
            {},
            {{48, 95, -10}, {97, 115, 21}, {116, 116, 44}, {117, 122, 21}, },
            {{48, 122, -10}, },
            {{48, 95, -10}, {97, 98, 21}, {99, 99, 45}, {100, 122, 21}, },
            {{48, 122, -10}, },
            {{0, 65535, -18}, },
            {{48, 122, -10}, },
            {{48, 115, -41}, {116, 116, 46}, {117, 122, 21}, },
            {{48, 122, -10}, },
        }
        { // HTMLHOLE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {47, 47, 5}, {65, 90, 6}, {93, 93, 7}, {95, 95, 8}, {97, 122, 9}, },
            {},
            {},
            {{10, 10, 10}, },
            {},
            {{42, 42, 11}, {47, 47, 12}, },
            {{48, 57, 13}, {65, 90, 14}, {95, 95, 15}, {97, 122, 16}, },
            {{62, 62, 17}, },
            {{48, 122, -8}, },
            {{48, 122, -8}, },
            {},
            {{0, 41, 18}, {42, 42, 19}, {43, 65535, 18}, },
            {{0, 9, 20}, {10, 10, 21}, {11, 12, 20}, {13, 13, 22}, {14, 65535, 20}, },
            {{48, 122, -8}, },
            {{48, 122, -8}, },
            {{48, 122, -8}, },
            {{48, 122, -8}, },
            {},
            {{0, 65535, -13}, },
            {{0, 41, 23}, {42, 42, 24}, {43, 46, 23}, {47, 47, 25}, {48, 65535, 23}, },
            {{0, 65535, -14}, },
            {},
            {{10, 10, 26}, },
            {{0, 65535, -13}, },
            {{0, 42, -13}, {43, 46, 18}, {47, 47, 27}, {48, 65535, 18}, },
            {},
            {},
            {{0, 65535, -13}, },
        }
        { // HTMLRIGHT
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {47, 47, 6}, {48, 48, 7}, {49, 57, 8}, {60, 60, 9}, {65, 90, 10}, {95, 95, 11}, {97, 122, 12}, },
            {},
            {},
            {{10, 10, 13}, },
            {},
            {{0, 33, 14}, {34, 34, 15}, {35, 65535, 14}, },
            {{42, 42, 16}, {47, 47, 17}, },
            {},
            {{48, 57, 18}, },
            {{91, 91, 19}, },
            {{48, 57, 20}, {65, 90, 21}, {95, 95, 22}, {97, 122, 23}, },
            {{48, 122, -12}, },
            {{48, 122, -12}, },
            {},
            {{0, 65535, -7}, },
            {},
            {{0, 41, 24}, {42, 42, 25}, {43, 65535, 24}, },
            {{0, 9, 26}, {10, 10, 27}, {11, 12, 26}, {13, 13, 28}, {14, 65535, 26}, },
            {{48, 57, 18}, },
            {},
            {{48, 122, -12}, },
            {{48, 122, -12}, },
            {{48, 122, -12}, },
            {{48, 122, -12}, },
            {{0, 65535, -18}, },
            {{0, 41, 29}, {42, 42, 30}, {43, 46, 29}, {47, 47, 31}, {48, 65535, 29}, },
            {{0, 65535, -19}, },
            {},
            {{10, 10, 32}, },
            {{0, 65535, -18}, },
            {{0, 42, -18}, {43, 46, 24}, {47, 47, 33}, {48, 65535, 24}, },
            {},
            {},
            {{0, 65535, -18}, },
        }
        { // HTMLKEY
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {47, 47, 6}, {61, 61, 7}, {114, 114, 8}, {116, 116, 9}, },
            {},
            {},
            {{10, 10, 10}, },
            {},
            {{114, 114, 11}, {116, 116, 12}, },
            {{42, 42, 13}, {47, 47, 14}, },
            {},
            {{97, 97, 15}, },
            {{101, 101, 16}, },
            {},
            {{97, 97, 17}, },
            {{101, 101, 18}, },
            {{0, 41, 19}, {42, 42, 20}, {43, 65535, 19}, },
            {{0, 9, 21}, {10, 10, 22}, {11, 12, 21}, {13, 13, 23}, {14, 65535, 21}, },
            {{100, 100, 24}, },
            {{120, 120, 25}, },
            {{100, 100, 26}, },
            {{120, 120, 27}, },
            {{0, 65535, -15}, },
            {{0, 41, 28}, {42, 42, 29}, {43, 46, 28}, {47, 47, 30}, {48, 65535, 28}, },
            {{0, 65535, -16}, },
            {},
            {{10, 10, 31}, },
            {{105, 105, 32}, },
            {{116, 116, 33}, },
            {{105, 105, 34}, },
            {{116, 116, 35}, },
            {{0, 65535, -15}, },
            {{0, 42, -15}, {43, 46, 19}, {47, 47, 36}, {48, 65535, 19}, },
            {},
            {},
            {{111, 111, 37}, },
            {},
            {{111, 111, 38}, },
            {{34, 34, 39}, },
            {{0, 65535, -15}, },
            {},
            {{34, 34, 40}, },
            {},
            {},
        }
        { // HTMLTAGHOLE
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {47, 47, 5}, {93, 93, 6}, },
            {},
            {},
            {{10, 10, 7}, },
            {},
            {{42, 42, 8}, {47, 47, 9}, },
            {{62, 62, 10}, },
            {},
            {{0, 41, 11}, {42, 42, 12}, {43, 65535, 11}, },
            {{0, 9, 13}, {10, 10, 14}, {11, 12, 13}, {13, 13, 15}, {14, 65535, 13}, },
            {},
            {{0, 65535, -10}, },
            {{0, 41, 16}, {42, 42, 17}, {43, 46, 16}, {47, 47, 18}, {48, 65535, 16}, },
            {{0, 65535, -11}, },
            {},
            {{10, 10, 19}, },
            {{0, 65535, -10}, },
            {{0, 42, -10}, {43, 46, 11}, {47, 47, 20}, {48, 65535, 11}, },
            {},
            {},
            {{0, 65535, -10}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // STEADY
        {-1, 1, 0, 0, 1, 53, -1, 58, -1, 41, 42, 56, 55, 45, 54, 61, 57, 63, 63, 35, 36, 34, 37, 62, 43, -1, 44, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 32, -1, 33, 0, 50, -1, 64, 59, -1, -1, 63, 38, 48, 51, 39, -1, 49, 52, 62, 62, 62, 62, 46, 47, 40, 62, 62, 62, 62, 62, 62, 20, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 60, -1, -1, -1, 2, 2, -1, 62, 62, 62, 62, 62, 62, 25, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, -1, -1, 3, 2, -1, 26, 62, 21, 18, 62, 6, 23, 62, 62, 62, 62, 62, 17, 62, 30, 62, 28, 62, 3, -1, 5, 31, 62, 62, 62, 62, 62, 62, 29, 22, 7, 62, 19, 15, 62, 62, 27, 24, 4, 16, },
        // HTML
        {66, 66, 1, 0, 0, 1, 66, 36, 0, 66, 66, -1, 38, 39, 66, 66, -1, 66, 2, 2, -1, -1, -1, 66, 66, 3, -1, -1, 2, 2, 2, -1, -1, 3, -1, 3, 2, -1, -1, -1, 3, -1, -1, 65, 8, },
        // HTMLTAG
        {-1, 1, 0, 0, 1, -1, 34, 37, 62, 62, 62, 62, 62, 62, 62, 0, -1, -1, 62, 62, 62, 62, 62, 62, 62, 62, -1, -1, -1, 2, 2, 62, 62, 62, 62, -1, -1, 3, 2, 62, 12, 62, 11, 3, 9, 62, 10, },
        // HTMLHOLE
        {-1, 1, 0, 0, 1, -1, 62, -1, 62, 62, 0, -1, -1, 62, 62, 62, 62, 40, -1, -1, -1, 2, 2, -1, -1, 3, 2, 3, },
        // HTMLRIGHT
        {-1, 1, 0, 0, 1, -1, -1, 63, 63, -1, 62, 62, 62, 0, -1, 64, -1, -1, 63, 39, 62, 62, 62, 62, -1, -1, -1, 2, 2, -1, -1, 3, 2, 3, },
        // HTMLKEY
        {-1, 1, 0, 0, 1, -1, -1, 34, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, 3, 2, -1, 13, -1, -1, 3, 14, -1, 13, 14, },
        // HTMLTAGHOLE
        {-1, 1, 0, 0, 1, -1, -1, 0, -1, -1, 40, -1, -1, -1, 2, 2, -1, -1, 3, 2, 3, },

    };*/

    public static class State
    {
        public final static State STEADY = new State(0);
        public final static State HTML = new State(1);
        public final static State HTMLTAG = new State(2);
        public final static State HTMLHOLE = new State(3);
        public final static State HTMLRIGHT = new State(4);
        public final static State HTMLKEY = new State(5);
        public final static State HTMLTAGHOLE = new State(6);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
